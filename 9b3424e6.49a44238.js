(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),a=(n(0),n(149)),i=n(151),l=n(152),c={id:"LC236",title:"LC236. Lowest Common Ancestor of a Binary Tree",sidebar_label:"LC236. Lowest Common Ancestor of a Binary Tree",tags:["Patterns/Tree","DataStructures/Tree"]},s={unversionedId:"QuestionBank/Leetcode/LC236",id:"QuestionBank/Leetcode/LC236",isDocsHomePage:!1,title:"LC236. Lowest Common Ancestor of a Binary Tree",description:"Problem Description",source:"@site/docs/QuestionBank/Leetcode/236. Lowest Common Ancestor of a Binary Tree.md",slug:"/QuestionBank/Leetcode/LC236",permalink:"/docs/QuestionBank/Leetcode/LC236",version:"current",sidebar_label:"LC236. Lowest Common Ancestor of a Binary Tree",sidebar:"Data Structure",previous:{title:"LC199. Binary Tree Right Side View",permalink:"/docs/QuestionBank/Leetcode/LC199"},next:{title:"VList",permalink:"/docs/DataStructures/Advanced/VList"}},u=[{value:"Problem Description",id:"problem-description",children:[]},{value:"Solution",id:"solution",children:[{value:"High level strategy",id:"high-level-strategy",children:[]},{value:"Code",id:"code",children:[]}]}],p={toc:u};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"problem-description"},"Problem Description"),Object(a.b)("p",null,"Source: ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/"}),"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/")),Object(a.b)("p",null,"Given a binary tree, return the lowest common ancestor (LCA) of two given nodes in the tree."),Object(a.b)("p",null,"According to the ",Object(a.b)("a",{href:"https://en.wikipedia.org/wiki/Lowest_common_ancestor"},"definition of LCA on Wikipedia"),": \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow ",Object(a.b)("strong",{parentName:"p"},"a node to be a descendant of itself"),").\u201d"),Object(a.b)("p",null,"For example:\nGiven binary tree ","[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]",", where p = 5, and q = 1,"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"        3\n      /   \\\n     5     1\n    / \\   / \\\n   6  2  0   8\n     / \\\n    7   4\n")),Object(a.b)("p",null,"return 3. "),Object(a.b)("h2",{id:"solution"},"Solution"),Object(a.b)("h3",{id:"high-level-strategy"},"High level strategy"),Object(a.b)("p",null,"Our approach to this problem is to solve it recursively. In our base case, we return the current node if it is equal to 'p', 'q', or null. This way, we will receive falsy values as we recurse down a branch that does not contain either 'p' or 'q'. Therefore, if either the left or right side of the current node returns null, then we know that that side of the tree does not contain the target values, and we can simply check the opposite side. We repeat this process until we arrive at a subtree that contains both target values, at which point we return the root node of the subtree. The time complexity of this solution is ",Object(a.b)("strong",{parentName:"p"},"O(n)"),", since we must check the entire tree. "),Object(a.b)("h3",{id:"code"},"Code"),Object(a.b)(i.a,{defaultValue:"js",values:[{label:"Javascript",value:"js"},{label:"Java",value:"java"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(a.b)(l.a,{value:"js",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n **/\nconst lowestCommonAncestor = (root, p, q) => {\n    if (root === null || root === p || root === q) return root;\n    let left = lowestCommonAncestor(root.left, p, q);\n    let right = lowestCommonAncestor(root.right, p, q); \n    \n    if (!left) return right;\n    if (!right) return left;\n    \n    return root;\n};\n"))),Object(a.b)(l.a,{value:"java",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if(root == null || root == p || root == q) return root;\n    TreeNode left = lowestCommonAncestor(root.left, p, q);\n    TreeNode right = lowestCommonAncestor(root.right, p, q);\n    return left == null ? right : right == null ? left : root;\n}\n"))),Object(a.b)(l.a,{value:"py",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def lowestCommonAncestor(self, root, p, q):\n        """\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        """\n\n        if not root:\n            return root \n\n        if root == p or root == q: \n            return root \n\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n\n        if left and right:\n            return root\n        else:\n            return left or right\n')))))}d.isMDXComponent=!0},149:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,f=p["".concat(i,".").concat(b)]||p[b]||d[b]||a;return n?o.a.createElement(f,l(l({ref:t},s),{},{components:n})):o.a.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},150:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},151:function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(153),i=n(150),l=n(55),c=n.n(l);const s=37,u=39;t.a=function(e){const{lazy:t,block:n,defaultValue:l,values:p,groupId:d,className:b}=e,{tabGroupChoices:f,setTabGroupChoices:m}=Object(a.a)(),[h,v]=Object(r.useState)(l),y=r.Children.toArray(e.children);if(null!=d){const e=f[d];null!=e&&e!==h&&p.some((t=>t.value===e))&&v(e)}const O=e=>{v(e),null!=d&&m(d,e)},g=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":n},b)},p.map((({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===e,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":h===e}),key:e,ref:e=>g.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case u:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(g,e.target,e)},onFocus:()=>O(e),onClick:()=>{O(e)}},t)))),t?Object(r.cloneElement)(y.filter((e=>e.props.value===h))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},y.map(((e,t)=>Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==h})))))}},152:function(e,t,n){"use strict";var r=n(3),o=n(0),a=n.n(o);t.a=function({children:e,hidden:t,className:n}){return a.a.createElement("div",Object(r.a)({role:"tabpanel"},{hidden:t,className:n}),e)}},153:function(e,t,n){"use strict";var r=n(0),o=n(154);t.a=function(){const e=Object(r.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},154:function(e,t,n){"use strict";var r=n(0);const o=Object(r.createContext)(void 0);t.a=o}}]);