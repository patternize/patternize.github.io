/*! For license information please see 1f3e6bd4.cddffe87.js.LICENSE */
(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{144:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return v}));var r=n(0),a=n.n(r);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),s=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},p=function(e){var t=s(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,b=p["".concat(o,".").concat(d)]||p[d]||f[d]||l;return n?a.a.createElement(b,i({ref:t},u,{components:n})):a.a.createElement(b,i({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},145:function(e,t,n){var r;!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var l=typeof r;if("string"===l||"number"===l)e.push(r);else if(Array.isArray(r)&&r.length){var o=a.apply(null,r);o&&e.push(o)}else if("object"===l)for(var i in r)n.call(r,i)&&r[i]&&e.push(i)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},155:function(e,t,n){"use strict";var r=n(0),a=n.n(r),l=n(145),o=n.n(l),i=n(88),c=n.n(i);const u={left:37,right:39};t.a=function(e){const{block:t,children:n,defaultValue:l,values:i}=e,[s,p]=Object(r.useState)(l),d=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:o()("tabs",{"tabs--block":t})},i.map(({value:e,label:t})=>a.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":s===e,className:o()("tab-item",c.a.tabItem,{"tab-item--active":s===e}),key:e,ref:e=>d.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case u.right:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case u.left:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(d,e.target,e),onFocus:()=>p(e),onClick:()=>p(e)},t))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter(e=>e.props.value===s)[0]))}},156:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){return a.a.createElement("div",null,e.children)}},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return f}));var r=n(1),a=n(6),l=(n(0),n(144)),o=n(155),i=n(156),c={id:"LC103",title:"LC103. Binary Tree Zigzag Level Order Traversal",sidebar_label:"LC103. Binary Tree Zigzag Level Order Traversal",tags:["Patterns/Tree","DataStructures/Tree"]},u={id:"QuestionBank/Leetcode/LC103",title:"LC103. Binary Tree Zigzag Level Order Traversal",description:"## Problem Description",source:"@site/docs/QuestionBank/Leetcode/103. Binary Tree Zigzag Level Order Traversal.md",permalink:"/docs/QuestionBank/Leetcode/LC103",sidebar_label:"LC103. Binary Tree Zigzag Level Order Traversal",sidebar:"Data Structure",previous:{title:"Preface",permalink:"/docs/DataStructures/README"},next:{title:"VList",permalink:"/docs/DataStructures/Advanced/vlist"}},s=[{value:"Problem Description",id:"problem-description",children:[]},{value:"Solution",id:"solution",children:[]}],p={rightToc:s},d="wrapper";function f(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(l.b)(d,Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"problem-description"},"Problem Description"),Object(l.b)("p",null,Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/"}),"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/")),Object(l.b)("p",null,"Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between)."),Object(l.b)("p",null,"For example:\nGiven binary tree ","[3,9,20,null,null,15,7]",",\n3\n/ \\\n9  20\n/  \\\n15   7\nreturn its zigzag level order traversal as:\n[\n","[3]",",\n","[20,9]",",\n","[15,7]","\n]"),Object(l.b)("h2",{id:"solution"},"Solution"),Object(l.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"java",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n            List<List<Integer>> toRet = new ArrayList<>();\n            if (root == null) return toRet;\n            Queue<TreeNode> queue = new LinkedList<>();\n            queue.add(root);\n            int count;\n            boolean leftToRight = true;\n            while(!queue.isEmpty()){\n                count = queue.size();\n                ArrayList<Integer> level = new ArrayList<>();\n                for (int i = 0; i < count; i ++){\n                    TreeNode node = queue.poll();\n                    if(leftToRight) {\n                        level.add(node.val);\n                    } else {\n                        level.add(0, node.val);\n                    }\n                    if(node.left != null){\n                        queue.add(node.left);\n                    }\n                    if(node.right != null){\n                        queue.add(node.right);\n                    }\n                }\n                leftToRight = !leftToRight;\n                toRet.add(level);\n            }\n            return toRet;\n        }\n}\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'class Solution(object):\n    def zigzagLevelOrder(self, root):\n        """\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        """\n        if not root: \n            return []\n\n        leftToRight = True \n\n        dq = collections.deque() \n        dq.append(root)\n        traversal = [] \n        while len(dq) > 0:\n            level = []\n            for i in range(len(dq)):\n                if leftToRight:\n                    cur = dq.popleft()\n                    level.append(cur.val)\n                    if cur.left:\n                        dq.append(cur.left)\n                    if cur.right:\n                        dq.append(cur.right)\n                else:\n                    cur = dq.pop()\n                    level.append(cur.val)\n\n                    if cur.right:\n                        dq.appendleft(cur.right)\n                    if cur.left:\n                        dq.appendleft(cur.left)\n\n            traversal.append(level)\n            leftToRight = not leftToRight\n        return traversal\n')))))}f.isMDXComponent=!0}}]);