(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{129:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=i.a.createContext({}),s=function(e){var n=i.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=s(e.components);return i.a.createElement(u.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(t),b=r,d=m["".concat(a,".").concat(b)]||m[b]||f[b]||o;return t?i.a.createElement(d,c(c({ref:n},u),{},{components:t})):i.a.createElement(d,c({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var u=2;u<o;u++)a[u]=t[u];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},130:function(e,n,t){"use strict";function r(e){var n,t,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(i&&(i+=" "),i+=t);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}n.a=function(){for(var e,n,t=0,i="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(i&&(i+=" "),i+=n);return i}},131:function(e,n,t){"use strict";var r=t(0),i=t.n(r),o=t(134),a=t(130),c=t(48),l=t.n(c);const u=37,s=39;n.a=function(e){const{block:n,children:t,defaultValue:c,values:m,groupId:f}=e,{tabGroupChoices:b,setTabGroupChoices:d}=Object(o.a)(),[p,j]=Object(r.useState)(c),[g,y]=Object(r.useState)(!1);if(null!=f){const e=b[f];null!=e&&e!==p&&m.some(n=>n.value===e)&&j(e)}const O=e=>{j(e),null!=f&&d(f,e)},h=[],v=e=>{e.metaKey||e.altKey||e.ctrlKey||y(!0)},w=()=>{y(!1)};return Object(r.useEffect)(()=>{window.addEventListener("keydown",v),window.addEventListener("mousedown",w)},[]),i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":n})},m.map(({value:e,label:n})=>i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":p===e,className:Object(a.a)("tabs__item",l.a.tabItem,{"tabs__item--active":p===e}),style:g?{}:{outline:"none"},key:e,ref:e=>h.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case s:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case u:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(h,e.target,e),v(e)},onFocus:()=>O(e),onClick:()=>{O(e),y(!1)},onPointerDown:()=>y(!1)},n))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter(e=>e.props.value===p)[0]))}},132:function(e,n,t){"use strict";var r=t(0),i=t.n(r);n.a=function(e){return i.a.createElement("div",null,e.children)}},133:function(e,n,t){"use strict";var r=t(0);const i=Object(r.createContext)(void 0);n.a=i},134:function(e,n,t){"use strict";var r=t(0),i=t(133);n.a=function(){const e=Object(r.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},153:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/bomberman-30f8e898f4dfe8db60bd478abc18b858.jpg"},51:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return f}));var r=t(1),i=t(6),o=(t(0),t(129)),a=t(131),c=t(132),l={title:"Leetcode 361. Bomb Enemy",tags:["DynamicProgramming/Coordinate"]},u={unversionedId:"Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy",id:"Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy",isDocsHomePage:!1,title:"Leetcode 361. Bomb Enemy",description:";",source:"@site/docs/Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy.md",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy"},s=[{value:"Example:",id:"example",children:[]}],m={rightToc:s};function f(e){var n=e.components,l=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},m,l,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("img",{src:t(153).default}),";"),Object(o.b)("h1",{id:"question"},"Question"),Object(o.b)("p",null,"Original Question: ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://leetcode.com/problems/bomb-enemy/"}),"Leetcode 361. Bomb Enemy")),Object(o.b)("p",null,"Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.\nNote: You can only put the bomb at an empty cell."),Object(o.b)("h3",{id:"example"},"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'Input: [["0","E","0","0"],["E","0","W","E"],["0","E","0","0"]]\nOutput: 3 \nExplanation: For the given grid,\n\n0 E 0 0 \nE 0 W E \n0 E 0 0\n\nPlacing a bomb at (1,1) kills 3 enemies.\n')),Object(o.b)("h1",{id:"solution"},"Solution"),Object(o.b)(a.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(o.b)(c.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int maxKilledEnemies(char[][] grid) {\n        if(grid.length == 0 || grid[0].length == 0) return 0;\n        int m = grid.length, n=grid[0].length;\n        int[][] up = new int[m][n];\n        int[][] down = new int[m][n];\n        int[][] left = new int[m][n];\n        int[][] right = new int[m][n];\n        \n        // fill up;\n        for(int i = 0; i < m; i++){\n           for(int j = 0; j < n; j++){\n               if(grid[i][j] == 'W'){\n                   up[i][j] = 0;\n                   continue;\n               }\n               \n               up[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(i>0){\n                   up[i][j] += up[i-1][j];\n               }\n           } \n        }\n        // fill left;\n        for(int i = 0; i < m; i++){\n           for(int j = 0; j < n; j++){\n               if(grid[i][j] == 'W'){\n                   left[i][j] = 0;\n                   continue;\n               }\n               \n               left[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(j>0){\n                   left[i][j] += left[i][j-1];\n               }\n           } \n        }\n        \n        // fill down;\n        for(int i = m-1; i >= 0; i--){\n           for(int j = n-1; j >= 0; j--){\n               if(grid[i][j] == 'W'){\n                   down[i][j] = 0;\n                   continue;\n               }\n               \n               down[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(i < m-1){\n                   down[i][j] += down[i+1][j];\n               }\n           } \n        }\n        \n        // fill right;\n        for(int i = m-1; i >= 0; i--){\n           for(int j = n-1; j >= 0; j--){\n               if(grid[i][j] == 'W'){\n                   right[i][j] = 0;\n                   continue;\n               }\n               \n               right[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(j < n-1){\n                   right[i][j] += right[i][j+1];\n               }\n           } \n        }\n        \n        int res = 0;\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                if(grid[i][j] == '0'){\n                    res = Math.max(res, up[i][j] + down[i][j] + right[i][j] + left[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}\n")))))}f.isMDXComponent=!0}}]);