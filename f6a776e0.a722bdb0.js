(window.webpackJsonp=window.webpackJsonp||[]).push([[68,35,51,64],{143:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return j}));var a=t(3),r=t(7),i=(t(0),t(149)),o=t(151),c=t(152),l=t(60),m=t(58),u=t(63),s={id:"index",title:"Matrix Questions",sidebar_label:"Matrix"},b={unversionedId:"Patterns/DynamicProgramming/Coordinate/Matrix/index",id:"Patterns/DynamicProgramming/Coordinate/Matrix/index",isDocsHomePage:!1,title:"Matrix Questions",description:"<Tabs",source:"@site/docs/Patterns/DynamicProgramming/Coordinate/Matrix/index.md",slug:"/Patterns/DynamicProgramming/Coordinate/Matrix/index",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/Matrix/index",version:"current",sidebar_label:"Matrix",sidebar:"Patterns",previous:{title:"Array Questions",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/Array/index"},next:{title:"Optimal Path Finding Questions",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/OptimalPathFinding/index"}},d=[],p={toc:d};function j(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)(o.a,{defaultValue:"MaximalSquare",values:[{label:"Maximal Square",value:"MaximalSquare"},{label:"Count Square Submatrices with All Ones",value:"CSSWAO"},{label:"Bomb Enemy",value:"BombEnemy"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"MaximalSquare",mdxType:"TabItem"},Object(i.b)(l.default,{mdxType:"MaximalSquare"})),Object(i.b)(c.a,{value:"CSSWAO",mdxType:"TabItem"},Object(i.b)(u.default,{mdxType:"CSSWAO"})),Object(i.b)(c.a,{value:"BombEnemy",mdxType:"TabItem"},Object(i.b)(m.default,{mdxType:"BombEnemy"}))))}j.isMDXComponent=!0},149:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return p}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=r.a.createContext({}),u=function(e){var n=r.a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=u(e.components);return r.a.createElement(m.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=u(t),d=a,p=s["".concat(o,".").concat(d)]||s[d]||b[d]||i;return t?r.a.createElement(p,c(c({ref:n},m),{},{components:t})):r.a.createElement(p,c({ref:n},m))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var m=2;m<i;m++)o[m]=t[m];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},150:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},151:function(e,n,t){"use strict";var a=t(0),r=t.n(a),i=t(153),o=t(150),c=t(55),l=t.n(c);const m=37,u=39;n.a=function(e){const{lazy:n,block:t,defaultValue:c,values:s,groupId:b,className:d}=e,{tabGroupChoices:p,setTabGroupChoices:j}=Object(i.a)(),[f,g]=Object(a.useState)(c),x=a.Children.toArray(e.children);if(null!=b){const e=p[b];null!=e&&e!==f&&s.some((n=>n.value===e))&&g(e)}const O=e=>{g(e),null!=b&&j(b,e)},y=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},d)},s.map((({value:e,label:n})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===e,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":f===e}),key:e,ref:e=>y.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case u:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case m:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(y,e.target,e)},onFocus:()=>O(e),onClick:()=>{O(e)}},n)))),n?Object(a.cloneElement)(x.filter((e=>e.props.value===f))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},x.map(((e,n)=>Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==f})))))}},152:function(e,n,t){"use strict";var a=t(3),r=t(0),i=t.n(r);n.a=function({children:e,hidden:n,className:t}){return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:t}),e)}},153:function(e,n,t){"use strict";var a=t(0),r=t(154);n.a=function(){const e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},154:function(e,n,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);n.a=r},185:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/bomberman-30f8e898f4dfe8db60bd478abc18b858.jpg"},58:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return m})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(7),i=(t(0),t(149)),o=t(151),c=t(152),l={title:"Leetcode 361. Bomb Enemy",tags:["DynamicProgramming/Coordinate"]},m={unversionedId:"Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy",id:"Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy",isDocsHomePage:!1,title:"Leetcode 361. Bomb Enemy",description:";",source:"@site/docs/Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy.md",slug:"/Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/Matrix/361-bomb-enemy",version:"current"},u=[{value:"Example:",id:"example",children:[]}],s={toc:u};function b(e){var n=e.components,l=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,l,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("img",{src:t(185).default}),";"),Object(i.b)("h1",{id:"question"},"Question"),Object(i.b)("p",null,"Original Question: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://leetcode.com/problems/bomb-enemy/"}),"Leetcode 361. Bomb Enemy")),Object(i.b)("p",null,"Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.\nNote: You can only put the bomb at an empty cell."),Object(i.b)("h3",{id:"example"},"Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'Input: [["0","E","0","0"],["E","0","W","E"],["0","E","0","0"]]\nOutput: 3 \nExplanation: For the given grid,\n\n0 E 0 0 \nE 0 W E \n0 E 0 0\n\nPlacing a bomb at (1,1) kills 3 enemies.\n')),Object(i.b)("h1",{id:"solution"},"Solution"),Object(i.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int maxKilledEnemies(char[][] grid) {\n        if(grid.length == 0 || grid[0].length == 0) return 0;\n        int m = grid.length, n=grid[0].length;\n        int[][] up = new int[m][n];\n        int[][] down = new int[m][n];\n        int[][] left = new int[m][n];\n        int[][] right = new int[m][n];\n        \n        // fill up;\n        for(int i = 0; i < m; i++){\n           for(int j = 0; j < n; j++){\n               if(grid[i][j] == 'W'){\n                   up[i][j] = 0;\n                   continue;\n               }\n               \n               up[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(i>0){\n                   up[i][j] += up[i-1][j];\n               }\n           } \n        }\n        // fill left;\n        for(int i = 0; i < m; i++){\n           for(int j = 0; j < n; j++){\n               if(grid[i][j] == 'W'){\n                   left[i][j] = 0;\n                   continue;\n               }\n               \n               left[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(j>0){\n                   left[i][j] += left[i][j-1];\n               }\n           } \n        }\n        \n        // fill down;\n        for(int i = m-1; i >= 0; i--){\n           for(int j = n-1; j >= 0; j--){\n               if(grid[i][j] == 'W'){\n                   down[i][j] = 0;\n                   continue;\n               }\n               \n               down[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(i < m-1){\n                   down[i][j] += down[i+1][j];\n               }\n           } \n        }\n        \n        // fill right;\n        for(int i = m-1; i >= 0; i--){\n           for(int j = n-1; j >= 0; j--){\n               if(grid[i][j] == 'W'){\n                   right[i][j] = 0;\n                   continue;\n               }\n               \n               right[i][j] = grid[i][j] == 'E' ? 1 : 0;\n               if(j < n-1){\n                   right[i][j] += right[i][j+1];\n               }\n           } \n        }\n        \n        int res = 0;\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                if(grid[i][j] == '0'){\n                    res = Math.max(res, up[i][j] + down[i][j] + right[i][j] + left[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}\n")))))}b.isMDXComponent=!0},60:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return m})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(7),i=(t(0),t(149)),o=t(151),c=t(152),l={title:"Leetcode 221. Maximal Square",tags:["DynamicProgramming/Coordinate"]},m={unversionedId:"Patterns/DynamicProgramming/Coordinate/Matrix/221-maximal-square",id:"Patterns/DynamicProgramming/Coordinate/Matrix/221-maximal-square",isDocsHomePage:!1,title:"Leetcode 221. Maximal Square",description:"Question",source:"@site/docs/Patterns/DynamicProgramming/Coordinate/Matrix/221-maximal-square.md",slug:"/Patterns/DynamicProgramming/Coordinate/Matrix/221-maximal-square",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/Matrix/221-maximal-square",version:"current"},u=[{value:"Example:",id:"example",children:[]}],s={toc:u};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"question"},"Question"),Object(i.b)("p",null,"Original Question: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://leetcode.com/problems/maximal-square/"}),"Leetcode 221. Maximal Square")),Object(i.b)("p",null,"Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area."),Object(i.b)("h3",{id:"example"},"Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Input: \n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nOutput: 4\n")),Object(i.b)("h1",{id:"solution"},"Solution"),Object(i.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        if(matrix.length == 0) return 0;\n        int[][] dp = new int[matrix.length+1][matrix[0].length+1];\n        int maxLen = 0;\n        for(int j = 1; j <= matrix.length; j++){\n            for(int i = 1; i <= matrix[0].length; i++){\n                if(matrix[j-1][i-1] == '1'){\n                    dp[j][i] = Math.min(Math.min(dp[j][i-1], dp[j-1][i]), dp[j-1][i-1]) + 1;\n                    maxLen = Math.max(maxLen, dp[j][i]);\n                }\n            }\n        }\n        return maxLen * maxLen;\n    }\n}\n"))),Object(i.b)(c.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]: \n            return 0 \n\n        m,n, maxL, prev = len(matrix), len(matrix[0]), 0, 0 \n        sqLength = [0] *(n+1) \n        for i in range(1,m+1):\n            for j in range(1,n+1):\n                temp = sqLength[j]\n                if matrix[i-1][j-1] == '1':\n                    sqLength[j] = min(sqLength[j], prev, sqLength[j-1]) + 1 \n                    maxL = max(maxL, sqLength[j])\n                else:\n                    sqLength[j] = 0 \n                prev = temp \n\n        return maxL*maxL\n")))))}b.isMDXComponent=!0},63:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return m})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(7),i=(t(0),t(149)),o=t(151),c=t(152),l={title:"Leetcode 1277. Count Square Submatrices with All Ones",tags:["DynamicProgramming/Coordinate"]},m={unversionedId:"Patterns/DynamicProgramming/Coordinate/Matrix/1277-count-square-submatrices-with-all-ones",id:"Patterns/DynamicProgramming/Coordinate/Matrix/1277-count-square-submatrices-with-all-ones",isDocsHomePage:!1,title:"Leetcode 1277. Count Square Submatrices with All Ones",description:"Question",source:"@site/docs/Patterns/DynamicProgramming/Coordinate/Matrix/1277-count-square-submatrices-with-all-ones.md",slug:"/Patterns/DynamicProgramming/Coordinate/Matrix/1277-count-square-submatrices-with-all-ones",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/Matrix/1277-count-square-submatrices-with-all-ones",version:"current"},u=[{value:"Example 1:",id:"example-1",children:[]},{value:"Example 2:",id:"example-2",children:[]}],s={toc:u};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"question"},"Question"),Object(i.b)("p",null,"Original Question: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://leetcode.com/problems/count-square-submatrices-with-all-ones/"}),"Leetcode 1277. Count Square Submatrices with All Ones")),Object(i.b)("p",null,"Given a m * n matrix of ones and zeros, return how many square submatrices have all ones."),Object(i.b)("h3",{id:"example-1"},"Example 1:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Input: matrix =\n[\n  [0,1,1,1],\n  [1,1,1,1],\n  [0,1,1,1]\n]\nOutput: 15\nExplanation: \nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is  1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n")),Object(i.b)("h3",{id:"example-2"},"Example 2:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Input: matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\nOutput: 7\nExplanation: \nThere are 6 squares of side 1.  \nThere is 1 square of side 2. \nTotal number of squares = 6 + 1 = 7.\n")),Object(i.b)("h1",{id:"solution"},"Solution"),Object(i.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int countSquares(int[][] A) {\n        int res = 0;\n        for (int i = 0; i < A.length; ++i) {\n            for (int j = 0; j < A[0].length; ++j) {\n                if (A[i][j] > 0 && i > 0 && j > 0) {\n                    A[i][j] = Math.min(A[i - 1][j - 1], Math.min(A[i - 1][j], A[i][j - 1])) + 1;\n                }\n                res += A[i][j];\n            }\n        }\n        return res;\n    }\n}\n")))))}b.isMDXComponent=!0}}]);