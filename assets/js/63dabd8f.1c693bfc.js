"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[8247],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),s=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(n),d=i,g=p["".concat(a,".").concat(d)]||p[d]||m[d]||l;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=d;var u={};for(var a in t)hasOwnProperty.call(t,a)&&(u[a]=t[a]);u.originalType=e,u[p]="string"==typeof e?e:i,o[1]=u;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5520:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>u,metadata:()=>s,toc:()=>p});var r=n(8168),i=n(8587),l=(n(6540),n(5680));const o=["components"],u={id:"Permutation",title:"Permutation of Elements",sidebar_label:"Permutation of Elements"},a=void 0,s={unversionedId:"Algorithms/Backtracking/Permutation",id:"Algorithms/Backtracking/Permutation",title:"Permutation of Elements",description:"This is a classic set of problems that can be solved using Backtracking.",source:"@site/docs/Algorithms/Backtracking/Permutation.md",sourceDirName:"Algorithms/Backtracking",slug:"/Algorithms/Backtracking/Permutation",permalink:"/docs/Algorithms/Backtracking/Permutation",draft:!1,tags:[],version:"current",frontMatter:{id:"Permutation",title:"Permutation of Elements",sidebar_label:"Permutation of Elements"},sidebar:"Algorithms",previous:{title:"Introduction to Backtracking",permalink:"/docs/Algorithms/Backtracking/Introduction"},next:{title:"Expression Puzzle",permalink:"/docs/Algorithms/Backtracking/ExpressionPuzzle"}},c={},p=[{value:"Type 1 Problem: Permutation of Distinct Elements",id:"type-1-problem-permutation-of-distinct-elements",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input",id:"input",level:4},{value:"Output",id:"output",level:4},{value:"Solution",id:"solution",level:3},{value:"Type 2 Problem: Permutation of Elements (duplicates possible)",id:"type-2-problem-permutation-of-elements-duplicates-possible",level:2},{value:"Problem Description",id:"problem-description-1",level:3},{value:"Input",id:"input-1",level:4},{value:"Output",id:"output-1",level:4},{value:"Solution",id:"solution-1",level:3},{value:"References",id:"references",level:2}],m={toc:p},d="wrapper";function g(e){let{components:t}=e,n=(0,i.A)(e,o);return(0,l.yg)(d,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("p",null,"This is a classic set of problems that can be solved using Backtracking."),(0,l.yg)("h2",{id:"type-1-problem-permutation-of-distinct-elements"},"Type 1 Problem: Permutation of Distinct Elements"),(0,l.yg)("h3",{id:"problem-description"},"Problem Description"),(0,l.yg)("p",null,"Given a collection of distinct integers, return all possible permutations."),(0,l.yg)("h4",{id:"input"},"Input"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"[1,3,5]")),(0,l.yg)("h4",{id:"output"},"Output"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"[\n   [1,3,5],\n   [1,5,3],\n   [3,1,5],\n   [3,5,1],\n   [5,1,3],\n   [5,3,1]\n ]")),(0,l.yg)("h3",{id:"solution"},"Solution"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    List<List<Integer>> results;\n\n    public List<List<Integer>> permute(int[] nums) {\n        this.results = new ArrayList<>();\n\n        // use a count array nad uniquenums array\n        int[] count = new int[nums.length];\n        Arrays.fill(count, 1);\n        \n        // create a dummy result so we know the length of the ArrayList and we can use set() instead\n        // would be nice if java supports new ArrayList<>(Arrays.asList(nums)), but its a no-no due to boxing issue\n        List<Integer> result = new ArrayList<>();\n        for(int num: nums) result.add(num);\n\n        // call backtrack\n        backtrack(result, nums, count, 0);\n        return this.results;\n    }\n\n    private void backtrack(List<Integer> result, int[] nums, int[] count, int level){\n        if(level == nums.length){\n            results.add(new ArrayList(result));\n            return;\n        }\n\n        for(int i = 0; i< nums.length; i++){\n            if(count[i] == 0) continue; // the digit has been used before\n            result.set(level, nums[i]);\n            count[i]--;\n            backtrack(result, nums, count, level+1);\n            count[i]++;\n        }\n    }\n}\n")),(0,l.yg)("h2",{id:"type-2-problem-permutation-of-elements-duplicates-possible"},"Type 2 Problem: Permutation of Elements (duplicates possible)"),(0,l.yg)("h3",{id:"problem-description-1"},"Problem Description"),(0,l.yg)("p",null,"Given a collection of integers that might contain duplicates, return all possible permutations."),(0,l.yg)("h4",{id:"input-1"},"Input"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"[1,1,5]")),(0,l.yg)("h4",{id:"output-1"},"Output"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"[\n   [1,1,5],\n   [1,5,1],\n   [5,1,1]\n ]")),(0,l.yg)("h3",{id:"solution-1"},"Solution"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    List<List<Integer>> results;\n\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        this.results = new ArrayList<>();\n\n        // handle duplicates\n        HashMap<Integer, Integer> hm = new HashMap<>();\n        for(int num : nums){\n            hm.put(num, hm.getOrDefault(num, 0)+1);\n        }\n\n        // use a count array nad uniquenums array\n        int[] uniqueNums = new int[hm.size()];\n        int[] count = new int[hm.size()];\n        int i = 0;\n        for(Map.Entry<Integer,Integer> entry : hm.entrySet()){\n            uniqueNums[i] = entry.getKey();\n            count[i] = entry.getValue();\n            i++;\n        }\n\n        // create a dummy result\n        List<Integer> result = new ArrayList<>();\n        for(int num: nums) result.add(num);\n\n        // call backtrack\n        backtrack(result, uniqueNums, count, 0);\n        return this.results;\n    }\n\n    private void backtrack(List<Integer> result, int[] nums, int[] count, int level){\n        if(level == result.size()){\n            results.add(new ArrayList(result));\n            return;\n        }\n\n        for(int i = 0; i< nums.length; i++){\n            if(count[i] == 0) continue; // the digit has been used before\n            result.set(level, nums[i]);\n            count[i]--;\n            backtrack(result, nums, count, level+1);\n            count[i]++;\n        }\n    }\n}\n")),(0,l.yg)("h2",{id:"references"},"References"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://leetcode.com/problems/permutations/"},"Leetcode 46. Permutations [Medium]")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://leetcode.com/problems/permutations-ii/"},"Leetcode 47. Permutations II [Medium]"))))}g.isMDXComponent=!0}}]);