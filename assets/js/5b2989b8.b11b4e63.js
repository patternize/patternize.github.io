"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[9770],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>g});var n=t(6540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=n.createContext({}),c=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(d.Provider,{value:r},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(t),m=i,g=s["".concat(d,".").concat(m)]||s[m]||u[m]||o;return t?n.createElement(g,a(a({ref:r},p),{},{components:t})):n.createElement(g,a({ref:r},p))}));function g(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var d in r)hasOwnProperty.call(r,d)&&(l[d]=r[d]);l.originalType=e,l[s]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5247:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var n=t(8168),i=t(8587),o=(t(6540),t(5680));const a=["components"],l={id:"OddEvenSort",title:"Odd-Even Sort",sidebar_label:"Odd-Even Sort"},d=void 0,c={unversionedId:"Algorithms/Sorting/OddEvenSort",id:"Algorithms/Sorting/OddEvenSort",title:"Odd-Even Sort",description:"Idea",source:"@site/docs/Algorithms/Sorting/OddEvenSort.md",sourceDirName:"Algorithms/Sorting",slug:"/Algorithms/Sorting/OddEvenSort",permalink:"/docs/Algorithms/Sorting/OddEvenSort",draft:!1,tags:[],version:"current",frontMatter:{id:"OddEvenSort",title:"Odd-Even Sort",sidebar_label:"Odd-Even Sort"},sidebar:"Algorithms",previous:{title:"Bubble Sort",permalink:"/docs/Algorithms/Sorting/BubbleSort"},next:{title:"Selection Sort",permalink:"/docs/Algorithms/Sorting/SelectionSort"}},p={},s=[{value:"Idea",id:"idea",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Runtime",id:"runtime",level:2},{value:"Reference",id:"reference",level:2}],u={toc:s},m="wrapper";function g(e){let{components:r}=e,t=(0,i.A)(e,a);return(0,o.yg)(m,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"idea"},"Idea"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"compare all (odd,even) indexed pairs of adjacent elements"),(0,o.yg)("li",{parentName:"ul"},"if a pair is in the wrong order, switch elements"),(0,o.yg)("li",{parentName:"ul"},"then alternate between (odd,even) and (even,odd) pairs")),(0,o.yg)("h2",{id:"implementation"},"Implementation"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"public class OddEvenSort{\n    public static void sort(int[] arr){\n        if(arr==null || arr.length<=1){\n            return;\n        }\n        boolean sorted = false;\n        int len = arr.length;\n        while(!sorted){\n            sorted = true;\n            //(odd,even) pairs\n            for(int i=1; i<len-1; i+=2){\n                if(arr[i] > arr[i+1]){\n                    swap(arr,i,i+1);\n                    sorted = false;\n                } \n            }\n            //(even,odd) pairs\n            for(int i=0; i<len-1; i+=2){\n                if(arr[i] > arr[i+1]){\n                    swap(arr,i,i+1);\n                    sorted = false;\n                }\n            }\n        }\n    }\n\n    public static void swap(int[] arr, int i, int j){\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n")),(0,o.yg)("h2",{id:"runtime"},"Runtime"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Time O(n^2)"),(0,o.yg)("li",{parentName:"ul"},"Space O(1)")),(0,o.yg)("h2",{id:"reference"},"Reference"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/odd-even-sort-brick-sort/"},"Odd Even Sort / Brick Sort"))))}g.isMDXComponent=!0}}]);