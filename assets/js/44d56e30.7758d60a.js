"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[7144],{6442:(e,n,a)=>{a.r(n),a.d(n,{Backtracking:()=>p,assets:()=>d,contentTitle:()=>u,default:()=>y,frontMatter:()=>s,metadata:()=>m,toc:()=>g});var t=a(8168),i=a(8587),r=a(6540),o=a(5680),l=a(2268);const c=["components"],s={id:"Introduction",title:"Introduction to Backtracking",sidebar_label:"Introduction to Backtracking"},u=void 0,m={unversionedId:"Algorithms/Backtracking/Introduction",id:"Algorithms/Backtracking/Introduction",title:"Introduction to Backtracking",description:"Have you ever run into these problems in your daily life?",source:"@site/docs/Algorithms/Backtracking/Introduction.md",sourceDirName:"Algorithms/Backtracking",slug:"/Algorithms/Backtracking/Introduction",permalink:"/docs/Algorithms/Backtracking/Introduction",draft:!1,tags:[],version:"current",frontMatter:{id:"Introduction",title:"Introduction to Backtracking",sidebar_label:"Introduction to Backtracking"},sidebar:"Algorithms",previous:{title:"Merge Sort",permalink:"/docs/Algorithms/Sorting/MergeSort"},next:{title:"Permutation of Elements",permalink:"/docs/Algorithms/Backtracking/Permutation/"}},d={},g=[{value:"Backtracking",id:"backtracking",level:2},{value:"Intuitions of A Backtracking Problem",id:"intuitions-of-a-backtracking-problem",level:2},{value:"Backtracking Generalized Solution Template",id:"backtracking-generalized-solution-template",level:2},{value:"References",id:"references",level:2}],p=()=>(0,o.yg)(r.Fragment,null,"undefined"!=typeof window&&(0,o.yg)(l.Lc,{data:{name:"\ud83e\udd43",children:[{name:"Bourbon",children:[{name:"Mint",children:[{name:"Mint Julep"}]},{name:"Vermouth",children:[{name:"Manhattan"}]},{name:"Lime",children:[{name:"Cherry",children:[{name:"Whiskey Sour"}]}]},{name:"Ice Cube",children:[{name:"Orange Peel",children:[{name:"Old Fashioned"}]}]}]},{name:"Vodka",children:[{name:"Tomato",children:[{name:"Bloody Mary"}]},{name:"Kahlua",children:[{name:"Cream",children:[{name:"White Russian"}]}]},{name:"Cranberry",children:[{name:"Grapefruit",children:[{name:"Sea Breeze"},{name:"Lime",children:[{name:"Cosmopolitan"}]}]}]}]},{name:"Rum",children:[{name:"Pineapple",children:[{name:"Coconut",children:[{name:"Pina Colada"}]}]},{name:"Lime",children:[{name:"Mojito"},{name:"Cola",children:[{name:"Cuba Libre"}]}]}]}]},mdxType:"TreeChart"})),k={toc:g,Backtracking:p},h="wrapper";function y(e){let{components:n}=e,a=(0,i.A)(e,c);return(0,o.yg)(h,(0,t.A)({},k,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Have you ever run into these problems in your daily life?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"For my luggage lock, what are some of the interesting password combination I can come up with? \ud83d\udd10"),(0,o.yg)("li",{parentName:"ul"},"For my living room, how many possible ways I can rearrange my sofa, table, speakers and TV? \ud83d\udcfa"),(0,o.yg)("li",{parentName:"ul"},"Or, yes! this is a good one, given a set of liquors and juice, what are possible cocktails I can come up with? \ud83c\udf79")),(0,o.yg)(p,{mdxType:"Backtracking"}),(0,o.yg)("h2",{id:"backtracking"},"Backtracking"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},'"Backtracking can be defined as a general algorithmic technique that considers searching every possible combination in order to solve a computational problem."')),(0,o.yg)("h2",{id:"intuitions-of-a-backtracking-problem"},"Intuitions of A Backtracking Problem"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},'The problem is about combinations, combinatorics, and permutation. Usually the problem has multiple possible solutions and it asks you to "list" or "enumerate" all the possible solutions.'),(0,o.yg)("li",{parentName:"ol"},"When you try to come up with an combination of both iteration and recursion. For example, you need to have a loop inside of a recursive function, and the loop's range depends on the function parameters:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"void someRecursiveFunction(int x, int y){\n    /* do something... */\n    for(int i = 0; i < y; i++){\n        /* do something in the for loop... */\n        // call someRecursiveFunction with updated parameters\n        someRecursiveFunction(x, y+i);\n    }\n    /* do something else... */\n}\n")),(0,o.yg)("ol",{start:3},(0,o.yg)("li",{parentName:"ol"},"When you can prove that the solution needs a runtime of ",(0,o.yg)("img",{src:"https://render.githubusercontent.com/render/math?math=O(n!)"}))),(0,o.yg)("h2",{id:"backtracking-generalized-solution-template"},"Backtracking Generalized Solution Template"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    /* Declare private data structures: */\n    private ArrayList<Integer> solutions;\n    public List<List<Integer>> permute(int[] nums) {\n        // declare private data structures\n        solutions = new ArrayList<>();\n        // call backtrack\n        backtrack(param1, param2);\n        // return results\n        return this.results;\n    }\n\n    private void backtrack(int param1, int param2){\n        // handle base case!\n        if(BaseCase qualified){\n            // Add current result to the solution collection\n            solutions.add(param2)\n            return;\n        }\n\n        for(int i = 0; i< param1; i++){\n            // 1. Handle edge case\n            if(count[i] == 0) continue;\n            // 2. Prepare a possible solution using some variable\n            result.set(level, nums[i]);\n            // 3. Remove used variable in step 2\n            count[i]--;\n            // 4. Call backtrack recursively\n            backtrack(param1, param2+1);\n            // 5. Add used variable in step 2 and 4 back to the set\n            count[i]++;\n        }\n    }\n}\n")),(0,o.yg)("h2",{id:"references"},"References"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/backtracking-introduction/"},"Geeksforgeeks: Intro to Backtracking"))))}y.isMDXComponent=!0}}]);