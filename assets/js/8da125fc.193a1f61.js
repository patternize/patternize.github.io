"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[2639],{5756:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>s,contentTitle:()=>m,default:()=>y,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var n=i(8168),r=i(8587),t=(i(6540),i(5680));i(8711);const o=["components"],l={id:"MaxSumSubarray",title:"Maximum Sum Subarray of Size K",sidebar_label:"Max Sum Subarray"},m=void 0,u={unversionedId:"Algorithms/SlidingWindow/MaxSumSubarray",id:"Algorithms/SlidingWindow/MaxSumSubarray",title:"Maximum Sum Subarray of Size K",description:"Problem",source:"@site/docs/Algorithms/SlidingWindow/MaxSumSubarray.md",sourceDirName:"Algorithms/SlidingWindow",slug:"/Algorithms/SlidingWindow/MaxSumSubarray",permalink:"/docs/Algorithms/SlidingWindow/MaxSumSubarray",draft:!1,tags:[],version:"current",frontMatter:{id:"MaxSumSubarray",title:"Maximum Sum Subarray of Size K",sidebar_label:"Max Sum Subarray"},sidebar:"Algorithms",previous:{title:"Introduction",permalink:"/docs/Algorithms/SlidingWindow/Introduction"},next:{title:"Introduction",permalink:"/docs/Algorithms/Interval/Introduction"}},s={},d=[{value:"Problem",id:"problem",level:2},{value:"Example",id:"example",level:2},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Time and Space Complexity",id:"time-and-space-complexity",level:2},{value:"Related Problems",id:"related-problems",level:2}],p={toc:d},g="wrapper";function y(e){let{components:a}=e,i=(0,r.A)(e,o);return(0,t.yg)(g,(0,n.A)({},p,i,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"problem"},"Problem"),(0,t.yg)("p",null,"Given an array of integers and a number k, find the maximum sum of a subarray of size k."),(0,t.yg)("h2",{id:"example"},"Example"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"Input: [1, 4, 2, 10, 2, 3, 1, 0, 20], k = 4\nOutput: 24\nExplanation: Maximum sum subarray of size 4 is [2, 10, 2, 3]\n")),(0,t.yg)("h2",{id:"solution-approach"},"Solution Approach"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Calculate sum of first k elements"),(0,t.yg)("li",{parentName:"ol"},"Keep sliding window by one position"),(0,t.yg)("li",{parentName:"ol"},"Remove first element of previous window"),(0,t.yg)("li",{parentName:"ol"},"Add last element of current window"),(0,t.yg)("li",{parentName:"ol"},"Update maximum sum found so far")),(0,t.yg)("h2",{id:"implementation"},"Implementation"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"public static int maxSum(int arr[], int k) {\n    if (arr.length < k) return -1;\n    \n    // Compute sum of first window of size k\n    int maxSum = 0;\n    for (int i = 0; i < k; i++)\n        maxSum += arr[i];\n    \n    // Compute sums of remaining windows by\n    // removing first element of previous\n    // window and adding last element of\n    // current window.\n    int windowSum = maxSum;\n    for (int i = k; i < arr.length; i++) {\n        windowSum += arr[i] - arr[i-k];\n        maxSum = Math.max(maxSum, windowSum);\n    }\n    \n    return maxSum;\n}\n")),(0,t.yg)("h2",{id:"time-and-space-complexity"},"Time and Space Complexity"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Time Complexity: O(n)"),(0,t.yg)("li",{parentName:"ul"},"Space Complexity: O(1)")),(0,t.yg)("h2",{id:"related-problems"},"Related Problems"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"https://leetcode.com/problems/maximum-average-subarray-i/"},"Maximum Average Subarray I (LeetCode 643)")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"https://leetcode.com/problems/subarray-sum-equals-k/"},"Subarray Sum Equals K (LeetCode 560)"))))}y.isMDXComponent=!0}}]);