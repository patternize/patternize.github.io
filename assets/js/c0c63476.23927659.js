"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[2071],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>d});var n=t(6540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,d=u["".concat(s,".").concat(m)]||u[m]||g[m]||a;return t?n.createElement(d,o(o({ref:r},p),{},{components:t})):n.createElement(d,o({ref:r},p))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6462:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var n=t(8168),i=t(8587),a=(t(6540),t(5680));const o=["components"],l={id:"MergeSort",title:"Merge Sort",sidebar_label:"Merge Sort"},s=void 0,c={unversionedId:"Algorithms/Sorting/MergeSort",id:"Algorithms/Sorting/MergeSort",title:"Merge Sort",description:"Idea",source:"@site/docs/Algorithms/Sorting/MergeSort.md",sourceDirName:"Algorithms/Sorting",slug:"/Algorithms/Sorting/MergeSort",permalink:"/docs/Algorithms/Sorting/MergeSort",draft:!1,tags:[],version:"current",frontMatter:{id:"MergeSort",title:"Merge Sort",sidebar_label:"Merge Sort"},sidebar:"Algorithms",previous:{title:"Insertion Sort",permalink:"/docs/Algorithms/Sorting/InsertionSort"},next:{title:"Introduction to React Fiber",permalink:"/docs/Algorithms/ReactFiber/intro-to-react-fiber"}},p={},u=[{value:"Idea",id:"idea",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Procedure",id:"procedure",level:2},{value:"Time and Space Analysis",id:"time-and-space-analysis",level:2}],g={toc:u},m="wrapper";function d(e){let{components:r}=e,t=(0,i.A)(e,o);return(0,a.yg)(m,(0,n.A)({},g,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"idea"},"Idea"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Use divide and conquer paradigm")),(0,a.yg)("h2",{id:"implementation"},"Implementation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"//merge sort\npublic class MergeSort{\n    //sort on the whole list, use p=0 and r=list.length-1\n    public static void mergeSort(int[] arr, int p, int r){\n        if(p < r){\n            int q = (int)Math.floor((p+r)/2);\n            //sort two subarrays\n            mergeSort(arr, p, q);\n            mergeSort(arr, q+1, r);\n            //merge sorted array\n            merge(arr, p, q, r);\n        }\n    }\n    \n    //merge two sorted array\n    public static void merge(int[] arr, int p, int q, int r){\n        int len1 = q-p+1;\n        int len2 = r-q;\n        //create two new arrays to store sorted array\n        int[] arr1 = new int[len1+1];\n        int[] arr2 = new int[len2+1];\n        //fill in the new arrays\n        for(int i=0; i<len1; i++){\n            arr1[i] = arr[p+i];\n        }\n        for(int i=0; i<len2; i++){\n            arr2[i] = arr[q+1+i];\n        }\n        //use MAX_VALUE at the last element\n        arr1[len1] = Integer.MAX_VALUE;\n        arr2[len2] = Integer.MAX_VALUE;\n\n        int i = 0;\n        int j = 0;\n        //merge sorted list\n        for(int k=p; k<=r; k++){\n            if(arr1[i] <= arr2[j]){\n                arr[k] = arr1[i];\n                i++;\n            }else{\n                arr[k] = arr2[j];\n                j++;\n            }\n        }\n    }\n}\n")),(0,a.yg)("h2",{id:"procedure"},"Procedure"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"divide array into two subarrays"),(0,a.yg)("li",{parentName:"ul"},"sort each subarray"),(0,a.yg)("li",{parentName:"ul"},"merge sorted subarrays into one")),(0,a.yg)("h2",{id:"time-and-space-analysis"},"Time and Space Analysis"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Time O(nlogn)"),(0,a.yg)("li",{parentName:"ul"},"Space O(nlogn)")))}d.isMDXComponent=!0}}]);