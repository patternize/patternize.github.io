"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[1468],{8478:(e,n,i)=>{i.d(n,{A:()=>r});var t=i(6540),a=i(2303);function r(e){let{children:n,fallback:i}=e;return(0,a.A)()?t.createElement(t.Fragment,null,null==n?void 0:n()):null!=i?i:null}},4852:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>S,frontMatter:()=>m,metadata:()=>c,toc:()=>p});var t=i(8168),a=i(8587),r=(i(6540),i(5680)),l=i(9926),o=i(8478);const s=["components"],m={id:"SelectionSort",title:"Selection Sort",sidebar_label:"Selection Sort",head:[{tag:"link",attributes:{rel:"stylesheet",href:"/css/sorting.css",precedence:"high"}}]},d=void 0,c={unversionedId:"Algorithms/Sorting/SelectionSort",id:"Algorithms/Sorting/SelectionSort",title:"Selection Sort",description:"Idea",source:"@site/docs/Algorithms/Sorting/SelectionSort.md",sourceDirName:"Algorithms/Sorting",slug:"/Algorithms/Sorting/SelectionSort",permalink:"/docs/Algorithms/Sorting/SelectionSort",draft:!1,tags:[],version:"current",frontMatter:{id:"SelectionSort",title:"Selection Sort",sidebar_label:"Selection Sort",head:[{tag:"link",attributes:{rel:"stylesheet",href:"/css/sorting.css",precedence:"high"}}]},sidebar:"Algorithms",previous:{title:"Odd-Even Sort",permalink:"/docs/Algorithms/Sorting/OddEvenSort"},next:{title:"Introduction to Backtracking",permalink:"/docs/Algorithms/Backtracking/Introduction"}},u={},p=[{value:"Idea",id:"idea",level:2},{value:"Visualization",id:"visualization",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Time and Space Analysis",id:"time-and-space-analysis",level:2}],g={toc:p},h="wrapper";function S(e){let{components:n}=e,i=(0,a.A)(e,s);return(0,r.yg)(h,(0,t.A)({},g,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"idea"},"Idea"),(0,r.yg)("p",null,"The idea is to select the smallest element of remaining array and then swap it to the front."),(0,r.yg)("h2",{id:"visualization"},"Visualization"),(0,r.yg)("br",null),(0,r.yg)(o.A,{mdxType:"BrowserOnly"},(()=>(0,r.yg)(l.Nj,{data:[[29,72,98,13,87,66,52,51,36],[13,72,98,29,87,66,52,51,36],[13,29,98,72,87,66,52,51,36],[13,29,36,72,87,66,52,51,98],[13,29,36,51,87,66,52,72,98],[13,29,36,51,52,66,87,72,98],[13,29,36,51,52,66,72,87,98]],steps:["Initial array","Find minimum (13) and swap with first element","Find minimum in remaining array (29) and swap with second element","Find minimum (36) and swap with third element","Find minimum (51) and swap with fourth element","Find minimum (52) and swap with fifth element","Array is now sorted"],mdxType:"Sorting"}))),(0,r.yg)("h2",{id:"implementation"},"Implementation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"scan array, find the minimum element's index min_idx"),(0,r.yg)("li",{parentName:"ul"},"swap the element to the index i, then incrememnt i")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class SelectionSort{\n    void selectionSort(int arr[]) {\n        int n = arr.length; \n    \n        // One by one move boundary of unsorted subarray \n        for (int i = 0; i < n-1; i++) { \n            // Find the minimum element in the input array \n            int min_idx = i; \n            for (int j = i+1; j < n; j++) \n                if (arr[j] < arr[min_idx]) \n                    min_idx = j; \n    \n            // Swap the found minimum element with the ith element\n            int temp = arr[min_idx]; \n            arr[min_idx] = arr[i]; \n            arr[i] = temp; \n        }\n    }\n}\n")),(0,r.yg)("h2",{id:"time-and-space-analysis"},"Time and Space Analysis"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Time O(n^2)"),(0,r.yg)("li",{parentName:"ul"},"Space O(1)")))}S.isMDXComponent=!0}}]);