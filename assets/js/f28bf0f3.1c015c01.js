"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[6922],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>d});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,d=p["".concat(u,".").concat(m)]||p[m]||y[m]||i;return t?r.createElement(d,a(a({ref:n},c),{},{components:t})):r.createElement(d,a({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5625:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=t(8168),o=t(8587),i=(t(6540),t(5680));const a=["components"],l={id:"Introduction",title:"Bit Manipulation",sidebar_label:"Introduction"},u=void 0,s={unversionedId:"Patterns/BitManipulation/Introduction",id:"Patterns/BitManipulation/Introduction",title:"Bit Manipulation",description:"Power of 2",source:"@site/docs/Patterns/BitManipulation/Introduction.md",sourceDirName:"Patterns/BitManipulation",slug:"/Patterns/BitManipulation/Introduction",permalink:"/docs/Patterns/BitManipulation/Introduction",draft:!1,tags:[],version:"current",frontMatter:{id:"Introduction",title:"Bit Manipulation",sidebar_label:"Introduction"},sidebar:"Patterns",previous:{title:"Optimal Path Finding",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/OptimalPathFinding/"},next:{title:"Minimum Height Trees",permalink:"/docs/QuestionBank/Leetcode/LC310"}},c={},p=[{value:"Power of 2",id:"power-of-2",level:2},{value:"Log Base of 2",id:"log-base-of-2",level:2},{value:"Count Ones In Binary Representation",id:"count-ones-in-binary-representation",level:2},{value:"References:",id:"references",level:2}],y={toc:p},m="wrapper";function d(e){let{components:n}=e,t=(0,o.A)(e,a);return(0,i.yg)(m,(0,r.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"power-of-2"},"Power of 2"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"(1 << x === 2) ^ x;\n")),(0,i.yg)("h2",{id:"log-base-of-2"},"Log Base of 2"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"# log(a) base b = log(a)/log(b)\n32 >> 5 === log(32)/log(2)\n")),(0,i.yg)("h2",{id:"count-ones-in-binary-representation"},"Count Ones In Binary Representation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"n&(n-1)")," rule: is used when you want to quickly count how many ",(0,i.yg)("inlineCode",{parentName:"li"},"1s")," in your binary number, every-time you do ",(0,i.yg)("inlineCode",{parentName:"li"},"n&(n-1)"),", a ",(0,i.yg)("inlineCode",{parentName:"li"},"1")," in your binary form will be removed:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"// first run\nn = 23 // (10111)\nnMinusOne = n - 1 // === 22 (10110)\nn = n & nMinusOne // === 22 (10111 & 10110 = 10110)\n// second run\nnMinusOne = 22 - 1 // == 21 (10101)\nn = n & nMinusOne // == 20 (10110 & 10101 = 10101)\n// third run\nnMinusOne = 20 - 1 // == 19 (10011)\nn = n & nMinusOne // == 16 (10101 & 10011 = 10000)\n// fourth run\nnMinusOne = 16 - 1 // == 15 (01111)\nn = n & nMinusOne // == 0 (10000 & 01111 = 00000)\n// after 4 times, n becomes 0; hence there are 4 1s in your original binary form of int 23\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"in short:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"int count_one(int n) {\n    while(n) {\n        n = n&(n-1);\n        count++;\n    }\n    return count;\n}\n")),(0,i.yg)("h2",{id:"references"},"References:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://leetcode.com/problems/sum-of-two-integers/discuss/84278/A-summary%3A-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently"},"https://leetcode.com/problems/sum-of-two-integers/discuss/84278/A-summary%3A-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently"))))}d.isMDXComponent=!0}}]);