"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[332],{5680:(e,r,t)=>{t.d(r,{xA:()=>v,yg:()=>u});var n=t(6540);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},v=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,v=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=l,u=c["".concat(s,".").concat(m)]||c[m]||g[m]||i;return t?n.createElement(u,a(a({ref:r},v),{},{components:t})):n.createElement(u,a({ref:r},v))}));function u(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=m;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[c]="string"==typeof e?e:l,a[1]=o;for(var p=2;p<i;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8417:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>v,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=t(8168),l=t(8587),i=(t(6540),t(5680));const a=["components"],o={id:"MergeIntervals",title:"Merge Intervals Pattern",sidebar_label:"Merge Intervals"},s=void 0,p={unversionedId:"Algorithms/Interval/MergeIntervals",id:"Algorithms/Interval/MergeIntervals",title:"Merge Intervals Pattern",description:"Pattern Description",source:"@site/docs/Algorithms/Interval/MergeIntervals.md",sourceDirName:"Algorithms/Interval",slug:"/Algorithms/Interval/MergeIntervals",permalink:"/docs/Algorithms/Interval/MergeIntervals",draft:!1,tags:[],version:"current",frontMatter:{id:"MergeIntervals",title:"Merge Intervals Pattern",sidebar_label:"Merge Intervals"},sidebar:"Algorithms",previous:{title:"Line Sweep",permalink:"/docs/Algorithms/Interval/LineSweep"},next:{title:"Introduction",permalink:"/docs/Algorithms/BitManipulation/Introduction"}},v={},c=[{value:"Pattern Description",id:"pattern-description",level:2},{value:"Common Problems",id:"common-problems",level:2},{value:"1. Merge Overlapping Intervals",id:"1-merge-overlapping-intervals",level:3},{value:"2. Insert Interval",id:"2-insert-interval",level:3},{value:"3. Interval List Intersections",id:"3-interval-list-intersections",level:3},{value:"4. Non-overlapping Intervals",id:"4-non-overlapping-intervals",level:3},{value:"5. Meeting Rooms",id:"5-meeting-rooms",level:3},{value:"Common Techniques",id:"common-techniques",level:2}],g={toc:c},m="wrapper";function u(e){let{components:r}=e,t=(0,l.A)(e,a);return(0,i.yg)(m,(0,n.A)({},g,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"pattern-description"},"Pattern Description"),(0,i.yg)("p",null,"The Merge Intervals pattern deals with problems involving overlapping intervals. These problems typically require:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Sorting intervals by start time"),(0,i.yg)("li",{parentName:"ol"},"Merging overlapping intervals"),(0,i.yg)("li",{parentName:"ol"},"Finding intersections or unions of intervals")),(0,i.yg)("h2",{id:"common-problems"},"Common Problems"),(0,i.yg)("h3",{id:"1-merge-overlapping-intervals"},"1. Merge Overlapping Intervals"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public int[][] merge(int[][] intervals) {\n    if (intervals.length <= 1) return intervals;\n    \n    // Sort by start time\n    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n    \n    List<int[]> result = new ArrayList<>();\n    int[] currentInterval = intervals[0];\n    result.add(currentInterval);\n    \n    for (int[] interval : intervals) {\n        if (interval[0] <= currentInterval[1]) {\n            currentInterval[1] = Math.max(currentInterval[1], interval[1]);\n        } else {\n            currentInterval = interval;\n            result.add(currentInterval);\n        }\n    }\n    \n    return result.toArray(new int[result.size()][]);\n}\n")),(0,i.yg)("h3",{id:"2-insert-interval"},"2. Insert Interval"),(0,i.yg)("h3",{id:"3-interval-list-intersections"},"3. Interval List Intersections"),(0,i.yg)("h3",{id:"4-non-overlapping-intervals"},"4. Non-overlapping Intervals"),(0,i.yg)("h3",{id:"5-meeting-rooms"},"5. Meeting Rooms"),(0,i.yg)("h2",{id:"common-techniques"},"Common Techniques"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Sort intervals by start/end time"),(0,i.yg)("li",{parentName:"ol"},"Track previous interval"),(0,i.yg)("li",{parentName:"ol"},"Use min-heap for meeting rooms"),(0,i.yg)("li",{parentName:"ol"},"Merge overlapping intervals"),(0,i.yg)("li",{parentName:"ol"},"Count overlapping intervals")))}u.isMDXComponent=!0}}]);