"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[8581],{5610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"Algorithms":[{"type":"category","label":"Sorting","collapsed":false,"items":[{"type":"link","label":"Bubble Sort","href":"/docs/Algorithms/Sorting/BubbleSort","docId":"Algorithms/Sorting/BubbleSort"},{"type":"link","label":"Insertion Sort","href":"/docs/Algorithms/Sorting/InsertionSort","docId":"Algorithms/Sorting/InsertionSort"},{"type":"link","label":"Merge Sort","href":"/docs/Algorithms/Sorting/MergeSort","docId":"Algorithms/Sorting/MergeSort"},{"type":"link","label":"Odd-Even Sort","href":"/docs/Algorithms/Sorting/OddEvenSort","docId":"Algorithms/Sorting/OddEvenSort"},{"type":"link","label":"Selection Sort","href":"/docs/Algorithms/Sorting/SelectionSort","docId":"Algorithms/Sorting/SelectionSort"}],"collapsible":true},{"type":"category","label":"Backtracking","items":[{"type":"link","label":"Introduction to Backtracking","href":"/docs/Algorithms/Backtracking/Introduction","docId":"Algorithms/Backtracking/Introduction"},{"type":"link","label":"Permutation of Elements","href":"/docs/Algorithms/Backtracking/Permutation","docId":"Algorithms/Backtracking/Permutation"},{"type":"link","label":"Expression Puzzle","href":"/docs/Algorithms/Backtracking/ExpressionPuzzle","docId":"Algorithms/Backtracking/ExpressionPuzzle"},{"type":"link","label":"Confusing Number","href":"/docs/Algorithms/Backtracking/ConfusingNumber","docId":"Algorithms/Backtracking/ConfusingNumber"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Graph","items":[{"type":"link","label":"Breadth First Search (BFS)","href":"/docs/Algorithms/Graph/breadth-first-search","docId":"Algorithms/Graph/BFS"},{"type":"link","label":"Depth First Search (DFS)","href":"/docs/Algorithms/Graph/depth-first-search","docId":"Algorithms/Graph/DFS"},{"type":"link","label":"Dijkstra\'s Algorithm","href":"/docs/Algorithms/Graph/dijkstra-algorithm","docId":"Algorithms/Graph/Dijkstra"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Dynamic Programming","items":[{"type":"category","label":"Coordinate Based","items":[{"type":"category","label":"Array","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leetcode 674. Longest Continuous Increasing Subsequence","href":"/docs/Algorithms/DynamicProgramming/Coordinate/Array/longest-continuous-increasing-subsequence","docId":"Algorithms/DynamicProgramming/Coordinate/Array/longest-continuous-increasing-subsequence"}],"href":"/docs/Algorithms/DynamicProgramming/Coordinate/Array/"},{"type":"link","label":"Introduction","href":"/docs/Algorithms/DynamicProgramming/Coordinate/intro","docId":"Algorithms/DynamicProgramming/Coordinate/intro"},{"type":"category","label":"Matrix","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leetcode 221. Maximal Square","href":"/docs/Algorithms/DynamicProgramming/Coordinate/Matrix/maximal-square","docId":"Algorithms/DynamicProgramming/Coordinate/Matrix/maximal-square"},{"type":"link","label":"Leetcode 361. Bomb Enemy","href":"/docs/Algorithms/DynamicProgramming/Coordinate/Matrix/bomb-enemy","docId":"Algorithms/DynamicProgramming/Coordinate/Matrix/bomb-enemy"},{"type":"link","label":"Leetcode 1277. Count Square Submatrices with All Ones","href":"/docs/Algorithms/DynamicProgramming/Coordinate/Matrix/count-square-submatrices-with-all-ones","docId":"Algorithms/DynamicProgramming/Coordinate/Matrix/count-square-submatrices-with-all-ones"}],"href":"/docs/Algorithms/DynamicProgramming/Coordinate/Matrix/"},{"type":"category","label":"Optimal Path Finding","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leetcode 62. Unique Paths","href":"/docs/Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths","docId":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths"},{"type":"link","label":"Leetcode 63. Unique Paths II","href":"/docs/Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths-ii","docId":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths-ii"},{"type":"link","label":"Leetcode 64. Minimum Path Sum","href":"/docs/Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-path-sum","docId":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-path-sum"},{"type":"link","label":"Leetcode 931. Minimum Falling Path Sum","href":"/docs/Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-falling-path-sum","docId":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-falling-path-sum"}],"href":"/docs/Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Sliding Window","items":[{"type":"link","label":"Introduction","href":"/docs/Algorithms/SlidingWindow/Introduction","docId":"Algorithms/SlidingWindow/Introduction"},{"type":"link","label":"Max Sum Subarray","href":"/docs/Algorithms/SlidingWindow/MaxSumSubarray","docId":"Algorithms/SlidingWindow/MaxSumSubarray"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Interval","items":[{"type":"link","label":"Introduction","href":"/docs/Algorithms/Interval/Introduction","docId":"Algorithms/Interval/Introduction"},{"type":"link","label":"Line Sweep","href":"/docs/Algorithms/Interval/LineSweep","docId":"Algorithms/Interval/LineSweep"},{"type":"link","label":"Merge Intervals","href":"/docs/Algorithms/Interval/MergeIntervals","docId":"Algorithms/Interval/MergeIntervals"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Bit Manipulation","items":[{"type":"link","label":"Introduction","href":"/docs/Algorithms/BitManipulation/Introduction","docId":"Algorithms/BitManipulation/Introduction"}],"collapsed":true,"collapsible":true}],"Data Structure":[{"type":"category","label":"Basics","collapsed":false,"items":[{"type":"category","label":"Binary Tree","items":[{"type":"link","label":"Definition and Properties","href":"/docs/DataStructures/Basic/BinaryTree/Definitions&&Properties","docId":"DataStructures/Basic/BinaryTree/Definitions&&Properties"},{"type":"link","label":"Traversals","href":"/docs/DataStructures/Basic/BinaryTree/BSTTraversals","docId":"DataStructures/Basic/BinaryTree/BSTTraversals"},{"type":"link","label":"Basic Operations","href":"/docs/DataStructures/Basic/BinaryTree/BSTOperations","docId":"DataStructures/Basic/BinaryTree/BSTOperations"},{"type":"category","label":"Common Problems","items":[{"type":"link","label":"Validate Binary Search Tree","href":"/docs/DataStructures/Basic/BinaryTree/CommonProblems/LC98","docId":"DataStructures/Basic/BinaryTree/CommonProblems/LC98"},{"type":"link","label":"Symmetric Tree","href":"/docs/DataStructures/Basic/BinaryTree/CommonProblems/LC101","docId":"DataStructures/Basic/BinaryTree/CommonProblems/LC101"},{"type":"link","label":"Binary Tree Zigzag Level Order Traversal","href":"/docs/DataStructures/Basic/BinaryTree/CommonProblems/LC103","docId":"DataStructures/Basic/BinaryTree/CommonProblems/LC103"},{"type":"link","label":"Convert Sorted Array to Binary Search Tree","href":"/docs/DataStructures/Basic/BinaryTree/CommonProblems/LC108","docId":"DataStructures/Basic/BinaryTree/CommonProblems/LC108"},{"type":"link","label":"Binary Tree Right Side View","href":"/docs/DataStructures/Basic/BinaryTree/CommonProblems/LC199","docId":"DataStructures/Basic/BinaryTree/CommonProblems/LC199"},{"type":"link","label":"Lowest Common Ancestor of a Binary Tree","href":"/docs/DataStructures/Basic/BinaryTree/CommonProblems/LC236","docId":"DataStructures/Basic/BinaryTree/CommonProblems/LC236"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"B Tree","items":[{"type":"link","label":"B Tree","href":"/docs/DataStructures/Basic/BTree/BTree","docId":"DataStructures/Basic/BTree/BTree"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Linked List","items":[{"type":"link","label":"Deletion Operations","href":"/docs/DataStructures/Basic/LinkedList/Deletion","docId":"DataStructures/Basic/LinkedList/Deletion"},{"type":"link","label":"Insertion Operations","href":"/docs/DataStructures/Basic/LinkedList/Insertion","docId":"DataStructures/Basic/LinkedList/Insertion"},{"type":"link","label":"Introduction","href":"/docs/DataStructures/Basic/LinkedList/Introduction","docId":"DataStructures/Basic/LinkedList/Introduction"}],"collapsed":true,"collapsible":true}],"collapsible":true},{"collapsed":false,"type":"category","label":"Advanced","items":[{"type":"link","label":"VList","href":"/docs/DataStructures/Advanced/VList","docId":"DataStructures/Advanced/VList"}],"collapsible":true}],"Applications":[{"type":"category","label":"Case Studies","collapsed":false,"items":[{"type":"link","label":"React Fiber","href":"/docs/Applications/ReactFiber/intro-to-react-fiber","docId":"Applications/ReactFiber/index"}],"collapsible":true},{"type":"category","label":"Language","items":[{"type":"link","label":"Preface","href":"/docs/Applications/Language/","docId":"Applications/Language/README"},{"type":"category","label":"Java","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"List","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ArrayList","href":"/docs/Applications/Language/Java/List/ArrayList","docId":"Applications/Language/Java/List/ArrayList"},{"type":"link","label":"Interface","href":"/docs/Applications/Language/Java/List/Interface","docId":"Applications/Language/Java/List/Interface"},{"type":"link","label":"LinkedList","href":"/docs/Applications/Language/Java/List/LinkedList","docId":"Applications/Language/Java/List/LinkedList"},{"type":"link","label":"Stack","href":"/docs/Applications/Language/Java/List/Stack","docId":"Applications/Language/Java/List/Stack"},{"type":"link","label":"Runtime","href":"/docs/Applications/Language/Java/List/Runtime","docId":"Applications/Language/Java/List/Runtime"}]},{"type":"category","label":"Map","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HashMap","href":"/docs/Applications/Language/Java/Map/HashMap","docId":"Applications/Language/Java/Map/HashMap"},{"type":"link","label":"HashTable","href":"/docs/Applications/Language/Java/Map/HashTable","docId":"Applications/Language/Java/Map/HashTable"},{"type":"link","label":"Interface","href":"/docs/Applications/Language/Java/Map/Interface","docId":"Applications/Language/Java/Map/Interface"},{"type":"link","label":"LinkedHashMap","href":"/docs/Applications/Language/Java/Map/LinkedHashMap","docId":"Applications/Language/Java/Map/LinkedHashMap"},{"type":"link","label":"TreeMap","href":"/docs/Applications/Language/Java/Map/TreeMap","docId":"Applications/Language/Java/Map/TreeMap"},{"type":"link","label":"Runtime","href":"/docs/Applications/Language/Java/Map/Runtime","docId":"Applications/Language/Java/Map/Runtime"}]},{"type":"link","label":"Introduction","href":"/docs/Applications/Language/Java/Overview","docId":"Applications/Language/Java/Overview"},{"type":"category","label":"Queue","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Interface","href":"/docs/Applications/Language/Java/Queue/Interface","docId":"Applications/Language/Java/Queue/Interface"},{"type":"link","label":"PriorityQueue","href":"/docs/Applications/Language/Java/Queue/PriorityQueue","docId":"Applications/Language/Java/Queue/PriorityQueue"},{"type":"link","label":"Runtime","href":"/docs/Applications/Language/Java/Queue/Runtime","docId":"Applications/Language/Java/Queue/Runtime"}]},{"type":"category","label":"Set","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HashSet","href":"/docs/Applications/Language/Java/Set/HashSet","docId":"Applications/Language/Java/Set/HashSet"},{"type":"link","label":"Interface","href":"/docs/Applications/Language/Java/Set/Interface","docId":"Applications/Language/Java/Set/Interface"},{"type":"link","label":"Runtime","href":"/docs/Applications/Language/Java/Set/Runtime","docId":"Applications/Language/Java/Set/Runtime"}]}]}],"collapsed":true,"collapsible":true}]},"docs":{"Algorithms/Backtracking/ConfusingNumber":{"id":"Algorithms/Backtracking/ConfusingNumber","title":"Confusing Number","description":"Problem Description","sidebar":"Algorithms"},"Algorithms/Backtracking/ExpressionPuzzle":{"id":"Algorithms/Backtracking/ExpressionPuzzle","title":"Expression Puzzle","description":"Problem Description","sidebar":"Algorithms"},"Algorithms/Backtracking/Introduction":{"id":"Algorithms/Backtracking/Introduction","title":"Introduction to Backtracking","description":"Ever faced these intriguing puzzles in your daily life? \ud83e\udd14","sidebar":"Algorithms"},"Algorithms/Backtracking/Permutation":{"id":"Algorithms/Backtracking/Permutation","title":"Permutation of Elements","description":"This is a classic set of problems that can be solved using Backtracking.","sidebar":"Algorithms"},"Algorithms/BitManipulation/Introduction":{"id":"Algorithms/BitManipulation/Introduction","title":"Bit Manipulation","description":"Basic Operations","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/Array/index":{"id":"Algorithms/DynamicProgramming/Coordinate/Array/index","title":"Array Questions","description":"<Tabs","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/Array/longest-continuous-increasing-subsequence":{"id":"Algorithms/DynamicProgramming/Coordinate/Array/longest-continuous-increasing-subsequence","title":"Leetcode 674. Longest Continuous Increasing Subsequence","description":"Original Question: Leetcode 674. Longest Continuous Increasing Subsequence","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/intro":{"id":"Algorithms/DynamicProgramming/Coordinate/intro","title":"Coordinate-based Dynamic Programming","description":"Introduction","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/Matrix/bomb-enemy":{"id":"Algorithms/DynamicProgramming/Coordinate/Matrix/bomb-enemy","title":"Leetcode 361. Bomb Enemy","description":";","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/Matrix/count-square-submatrices-with-all-ones":{"id":"Algorithms/DynamicProgramming/Coordinate/Matrix/count-square-submatrices-with-all-ones","title":"Leetcode 1277. Count Square Submatrices with All Ones","description":"Original Question: Leetcode 1277. Count Square Submatrices with All Ones","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/Matrix/index":{"id":"Algorithms/DynamicProgramming/Coordinate/Matrix/index","title":"Matrix Questions","description":"<Tabs","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/Matrix/maximal-square":{"id":"Algorithms/DynamicProgramming/Coordinate/Matrix/maximal-square","title":"Leetcode 221. Maximal Square","description":"Original Question: Leetcode 221. Maximal Square","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/index":{"id":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/index","title":"Optimal Path Finding Questions","description":"<Tabs","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-falling-path-sum":{"id":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-falling-path-sum","title":"Leetcode 931. Minimum Falling Path Sum","description":"Original Question: 931. Minimum Falling Path Sum","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-path-sum":{"id":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/minimum-path-sum","title":"Leetcode 64. Minimum Path Sum","description":"Original Question: Leetcode 64. Minimum Path Sum","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths":{"id":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths","title":"Leetcode 62. Unique Paths","description":"Original Question: Leetcode 62. Unique Paths","sidebar":"Algorithms"},"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths-ii":{"id":"Algorithms/DynamicProgramming/Coordinate/OptimalPathFinding/unique-paths-ii","title":"Leetcode 63. Unique Paths II","description":"Original Question: Leetcode 63. Unique Paths II","sidebar":"Algorithms"},"Algorithms/Graph/BFS":{"id":"Algorithms/Graph/BFS","title":"Breadth First Search (BFS)","description":"Understanding Breadth First Search algorithm and its implementation","sidebar":"Algorithms"},"Algorithms/Graph/DFS":{"id":"Algorithms/Graph/DFS","title":"Depth First Search (DFS)","description":"Understanding Depth First Search algorithm and its implementation","sidebar":"Algorithms"},"Algorithms/Graph/Dijkstra":{"id":"Algorithms/Graph/Dijkstra","title":"Dijkstra\'s Algorithm","description":"Understanding Dijkstra\'s shortest path algorithm and its implementation","sidebar":"Algorithms"},"Algorithms/Interval/Introduction":{"id":"Algorithms/Interval/Introduction","title":"Sliding Window Pattern","description":"What are Interval Problems?","sidebar":"Algorithms"},"Algorithms/Interval/LineSweep":{"id":"Algorithms/Interval/LineSweep","title":"Line Sweep","description":"","sidebar":"Algorithms"},"Algorithms/Interval/MergeIntervals":{"id":"Algorithms/Interval/MergeIntervals","title":"Merge Intervals Pattern","description":"Pattern Description","sidebar":"Algorithms"},"Algorithms/README":{"id":"Algorithms/README","title":"Preface","description":"Preface"},"Algorithms/SlidingWindow/Introduction":{"id":"Algorithms/SlidingWindow/Introduction","title":"Sliding Window Pattern","description":"What is Sliding Window?","sidebar":"Algorithms"},"Algorithms/SlidingWindow/MaxSumSubarray":{"id":"Algorithms/SlidingWindow/MaxSumSubarray","title":"Maximum Sum Subarray of Size K","description":"Problem","sidebar":"Algorithms"},"Algorithms/Sorting/BubbleSort":{"id":"Algorithms/Sorting/BubbleSort","title":"Bubble Sort","description":"Idea","sidebar":"Algorithms"},"Algorithms/Sorting/InsertionSort":{"id":"Algorithms/Sorting/InsertionSort","title":"Insertion Sort","description":"Idea","sidebar":"Algorithms"},"Algorithms/Sorting/MergeSort":{"id":"Algorithms/Sorting/MergeSort","title":"Merge Sort","description":"Idea","sidebar":"Algorithms"},"Algorithms/Sorting/OddEvenSort":{"id":"Algorithms/Sorting/OddEvenSort","title":"Odd-Even Sort","description":"Idea","sidebar":"Algorithms"},"Algorithms/Sorting/SelectionSort":{"id":"Algorithms/Sorting/SelectionSort","title":"Selection Sort","description":"Idea","sidebar":"Algorithms"},"Applications/Language/Java/List/ArrayList":{"id":"Applications/Language/Java/List/ArrayList","title":"ArrayList","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/List/Interface":{"id":"Applications/Language/Java/List/Interface","title":"List Interface","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/List/LinkedList":{"id":"Applications/Language/Java/List/LinkedList","title":"LinkedList","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/List/Runtime":{"id":"Applications/Language/Java/List/Runtime","title":"Runtime","description":"List                 | add  | remove | get  | contains | next | Data Structure","sidebar":"Applications"},"Applications/Language/Java/List/Stack":{"id":"Applications/Language/Java/List/Stack","title":"Stack","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Map/HashMap":{"id":"Applications/Language/Java/Map/HashMap","title":"HashMap","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Map/HashTable":{"id":"Applications/Language/Java/Map/HashTable","title":"HashTable","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Map/Interface":{"id":"Applications/Language/Java/Map/Interface","title":"Map Interface","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Map/LinkedHashMap":{"id":"Applications/Language/Java/Map/LinkedHashMap","title":"LinkedHashMap","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Map/Runtime":{"id":"Applications/Language/Java/Map/Runtime","title":"Runtime","description":"Map |put |   get    | containsKey |   next   | Data Structure","sidebar":"Applications"},"Applications/Language/Java/Map/TreeMap":{"id":"Applications/Language/Java/Map/TreeMap","title":"TreeMap","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Overview":{"id":"Applications/Language/Java/Overview","title":"Java Specific Notebook","description":"Major Interfaces","sidebar":"Applications"},"Applications/Language/Java/Queue/Interface":{"id":"Applications/Language/Java/Queue/Interface","title":"Queue Interface","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Queue/PriorityQueue":{"id":"Applications/Language/Java/Queue/PriorityQueue","title":"PriorityQueue","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Queue/Runtime":{"id":"Applications/Language/Java/Queue/Runtime","title":"Runtime","description":"Queue Interface","sidebar":"Applications"},"Applications/Language/Java/Set/HashSet":{"id":"Applications/Language/Java/Set/HashSet","title":"HashSet","description":"Basics","sidebar":"Applications"},"Applications/Language/Java/Set/Interface":{"id":"Applications/Language/Java/Set/Interface","title":"Set Interface","description":"Basic","sidebar":"Applications"},"Applications/Language/Java/Set/Runtime":{"id":"Applications/Language/Java/Set/Runtime","title":"Runtime","description":"Set                   |    add   |  remove  | contains |   next   | size | Data Structure","sidebar":"Applications"},"Applications/Language/README":{"id":"Applications/Language/README","title":"Preface","description":"This page will be language specific.","sidebar":"Applications"},"Applications/ReactFiber/index":{"id":"Applications/ReactFiber/index","title":"React Fiber","description":"A comprehensive guide to understanding React Fiber, its architecture, and how it improves React performance","sidebar":"Applications"},"DataStructures/Advanced/VList":{"id":"DataStructures/Advanced/VList","title":"VList","description":"Implement an array that has flexible length. In other words, implement ArrayList in Java without using ArrayList.","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/BSTOperations":{"id":"DataStructures/Basic/BinaryTree/BSTOperations","title":"Basic Operations","description":"Lookup","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/BSTTraversals":{"id":"DataStructures/Basic/BinaryTree/BSTTraversals","title":"Traversals","description":"When we traverse a m-ary tree or a binary tree, we can either visit the deepest nodes first, or every node on the top-most level first. The former is called depth-first search (DFS), and the latter is called breadth-first search (BFS). For trees in particular, since trees are a subset of graphs, depth-first search can be done in three ways. These are pre-order, in-order, and post-order traversals. Hence, there are a total of four different forms of tree traversals.","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/CommonProblems/LC101":{"id":"DataStructures/Basic/BinaryTree/CommonProblems/LC101","title":"Symmetric Tree","description":"Problem Description","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/CommonProblems/LC103":{"id":"DataStructures/Basic/BinaryTree/CommonProblems/LC103","title":"Binary Tree Zigzag Level Order Traversal","description":"Problem Description","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/CommonProblems/LC108":{"id":"DataStructures/Basic/BinaryTree/CommonProblems/LC108","title":"Convert Sorted Array to Binary Search Tree","description":"Problem Description","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/CommonProblems/LC199":{"id":"DataStructures/Basic/BinaryTree/CommonProblems/LC199","title":"Binary Tree Right Side View","description":"Problem Description","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/CommonProblems/LC236":{"id":"DataStructures/Basic/BinaryTree/CommonProblems/LC236","title":"Lowest Common Ancestor of a Binary Tree","description":"Problem Description","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/CommonProblems/LC98":{"id":"DataStructures/Basic/BinaryTree/CommonProblems/LC98","title":"Validate Binary Search Tree","description":"Problem Description","sidebar":"Data Structure"},"DataStructures/Basic/BinaryTree/Definitions&&Properties":{"id":"DataStructures/Basic/BinaryTree/Definitions&&Properties","title":"Definition and Properties","description":"A binary tree is a hierarchical data structure that belongs to the family of m-ary trees, where each node can have an arbitrary number of children. Similar to other m-ary trees, binary trees are commonly implemented using a linked list structure. Each node in a binary tree consists of a value and two pointers, which reference the node\'s left and right children respectively.","sidebar":"Data Structure"},"DataStructures/Basic/BTree/BTree":{"id":"DataStructures/Basic/BTree/BTree","title":"B Tree","description":"Overview","sidebar":"Data Structure"},"DataStructures/Basic/LinkedList/Deletion":{"id":"DataStructures/Basic/LinkedList/Deletion","title":"Linked List Deletion","description":"Visualization","sidebar":"Data Structure"},"DataStructures/Basic/LinkedList/Insertion":{"id":"DataStructures/Basic/LinkedList/Insertion","title":"Linked List Insertion","description":"Visualization","sidebar":"Data Structure"},"DataStructures/Basic/LinkedList/Introduction":{"id":"DataStructures/Basic/LinkedList/Introduction","title":"Linked List","description":"What is a Linked List?","sidebar":"Data Structure"},"DataStructures/README":{"id":"DataStructures/README","title":"Preface","description":"Preface"},"DataStructures/Tree/SegmentTree":{"id":"DataStructures/Tree/SegmentTree","title":"Segment Tree","description":"Idea"},"mdx":{"id":"mdx","title":"Powered by MDX","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"QuestionBank/Leetcode/LC310":{"id":"QuestionBank/Leetcode/LC310","title":"Minimum Height Trees","description":"Problem Description"},"QuestionBank/Leetcode/LC560":{"id":"QuestionBank/Leetcode/LC560","title":"Minimum Height Trees","description":"Problem Description"}}}')}}]);