"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[368],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>m});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=u(a),g=r,m=s["".concat(p,".").concat(g)]||s[g]||y[g]||l;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},6106:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>s});var n=a(8168),r=a(8587),l=(a(6540),a(5680));const i=["components"],o={id:"Interface",title:"Map Interface",sidebar_label:"Interface"},p=void 0,u={unversionedId:"Applications/Language/Java/Map/Interface",id:"Applications/Language/Java/Map/Interface",title:"Map Interface",description:"Basics",source:"@site/docs/Applications/Language/Java/Map/Interface.md",sourceDirName:"Applications/Language/Java/Map",slug:"/Applications/Language/Java/Map/Interface",permalink:"/docs/Applications/Language/Java/Map/Interface",draft:!1,tags:[],version:"current",frontMatter:{id:"Interface",title:"Map Interface",sidebar_label:"Interface"},sidebar:"Applications",previous:{title:"HashTable",permalink:"/docs/Applications/Language/Java/Map/HashTable"},next:{title:"LinkedHashMap",permalink:"/docs/Applications/Language/Java/Map/LinkedHashMap"}},c={},s=[{value:"Basics",id:"basics",level:2},{value:"Put",id:"put",level:2},{value:"Remove",id:"remove",level:2},{value:"<em>Pitfall - ConcurrentModificationException</em>",id:"pitfall---concurrentmodificationexception",level:4},{value:"Iterate Through Values",id:"iterate-through-values",level:2}],y={toc:s},g="wrapper";function m(e){let{components:t}=e,a=(0,r.A)(e,i);return(0,l.yg)(g,(0,n.A)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"basics"},"Basics"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"maps Key to Value -- ",(0,l.yg)("inlineCode",{parentName:"li"},"<K, V>")),(0,l.yg)("li",{parentName:"ul"},"no duplicated Key allowed, or it will overwrite previous value with the same Key, aka. a key can only map to at most one value"),(0,l.yg)("li",{parentName:"ul"},"deplicated Values are allowed")),(0,l.yg)("h2",{id:"put"},"Put"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Returns previous value in the Key associated:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"HashMap hm = new HashMap();\nSystem.out.println(hm.put(1, 1)); // returns Null\nSystem.out.println(hm.put(1, 2)); // 1\nSystem.out.println(hm.put(1, 3)); // 2\n")),(0,l.yg)("h2",{id:"remove"},"Remove"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"HashMap remove can uses key as a parameter:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"map.remove(c); // c is key\n")),(0,l.yg)("h4",{id:"pitfall---concurrentmodificationexception"},(0,l.yg)("em",{parentName:"h4"},"Pitfall - ConcurrentModificationException")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"for(int num : nums){\n    ctr.put(num, ctr.getOrDefault(num, 0) + 1);\n    if(ctr.size() > k){\n        for(int key : ctr.keySet()){\n            if(ctr.get(key) == 1){\n                ctr.remove(key);\n            } else ctr.put(key, ctr.get(key) -1);\n        }\n    }\n}\n")),(0,l.yg)("h2",{id:"iterate-through-values"},"Iterate Through Values"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"use for loop \u2014 use ",(0,l.yg)("inlineCode",{parentName:"li"},"values()")," to iterate through values in a HashMap:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"HashMap<Integer, Integer> count = new HashMap<>();\nfor (int i : count.values())\n    res = Math.max(res, i);\nreturn res;\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"use ",(0,l.yg)("inlineCode",{parentName:"li"},"Map.Entry<K, V> entry: map.entrySet()")," to iterate through both values and keys:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"for(Map.Entry<Character, Integer> entry: hm.entrySet()){\n  entry.getKey();\n  entry.getValue();\n}\n")))}m.isMDXComponent=!0}}]);