"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[1024],{5680:(e,t,a)=>{a.d(t,{xA:()=>s,yg:()=>y});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=p(a),m=r,y=g["".concat(c,".").concat(m)]||g[m]||u[m]||i;return a?n.createElement(y,o(o({ref:t},s),{},{components:a})):n.createElement(y,o({ref:t},s))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7611:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var n=a(8168),r=a(8587),i=(a(6540),a(5680));const o=["components"],l={id:"Stack",title:"Stack",sidebar_label:"Stack"},c=void 0,p={unversionedId:"Language/Java/List/Stack",id:"Language/Java/List/Stack",title:"Stack",description:"Basics",source:"@site/docs/Language/Java/List/Stack.md",sourceDirName:"Language/Java/List",slug:"/Language/Java/List/Stack",permalink:"/docs/Language/Java/List/Stack",draft:!1,tags:[],version:"current",frontMatter:{id:"Stack",title:"Stack",sidebar_label:"Stack"},sidebar:"Language",previous:{title:"LinkedList",permalink:"/docs/Language/Java/List/LinkedList"},next:{title:"Runtime",permalink:"/docs/Language/Java/List/Runtime"}},s={},g=[{value:"Basics",id:"basics",level:2},{value:"Methods",id:"methods",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Applications",id:"applications",level:2}],u={toc:g},m="wrapper";function y(e){let{components:t}=e,a=(0,r.A)(e,o);return(0,i.yg)(m,(0,n.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"basics"},"Basics"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Stack Implements ",(0,i.yg)("strong",{parentName:"li"},"Vector"),"(sync), ",(0,i.yg)("strong",{parentName:"li"},"Vector")," implements ",(0,i.yg)("strong",{parentName:"li"},"List")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("em",{parentName:"li"},"Anything you can do with Stack you can do with linkedlist"),", the only reason to use stack will be to utilize synchronous ability of Vector, since Stack implements a Vector"),(0,i.yg)("li",{parentName:"ul"},"common menthods: ")),(0,i.yg)("h2",{id:"methods"},"Methods"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"empty()"),(0,i.yg)("th",{parentName:"tr",align:"center"},"O(1)"),(0,i.yg)("th",{parentName:"tr",align:null},"To test if this stack is empty"),(0,i.yg)("th",{parentName:"tr",align:"center"},"boolean"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"peek()"),(0,i.yg)("td",{parentName:"tr",align:"center"},"O(1)"),(0,i.yg)("td",{parentName:"tr",align:null},"looks at the top of the stack without removing it from the stack"),(0,i.yg)("td",{parentName:"tr",align:"center"},"E")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"pop()"),(0,i.yg)("td",{parentName:"tr",align:"center"},"O(1)"),(0,i.yg)("td",{parentName:"tr",align:null},"Removes the object at the top of this stack and returns that object as the value of this function."),(0,i.yg)("td",{parentName:"tr",align:"center"},"E")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"push()"),(0,i.yg)("td",{parentName:"tr",align:"center"},"O(1)"),(0,i.yg)("td",{parentName:"tr",align:null},"Pushes an item onto the top of this stack."),(0,i.yg)("td",{parentName:"tr",align:"center"},"E")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"search(Object o)"),(0,i.yg)("td",{parentName:"tr",align:"center"},"O(n)"),(0,i.yg)("td",{parentName:"tr",align:null},"Returns the 1-based position where an object is on this stack."),(0,i.yg)("td",{parentName:"tr",align:"center"},"int")))),(0,i.yg)("h2",{id:"implementation"},"Implementation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"list: push is to add node to the front of list and pop is to remove from front of list"),(0,i.yg)("li",{parentName:"ul"},"array: topOfStack is initialized to -1, when push, arr","[topOfStack++]","=element; when pop, return arr","[--topOfStack]","; use topOfStack==-1 to check if emtpy")),(0,i.yg)("h2",{id:"applications"},"Applications"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"balance symbols"),(0,i.yg)("li",{parentName:"ul"},"postfix expression"),(0,i.yg)("li",{parentName:"ul"},"infix to postfix conversion"),(0,i.yg)("li",{parentName:"ul"},"method calls")))}y.isMDXComponent=!0}}]);