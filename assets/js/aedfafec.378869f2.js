"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[9366],{8478:(t,e,a)=>{a.d(e,{A:()=>r});var n=a(6540),i=a(2303);function r(t){let{children:e,fallback:a}=t;return(0,i.A)()?n.createElement(n.Fragment,null,null==e?void 0:e()):null!=a?a:null}},5620:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>d,default:()=>y,frontMatter:()=>c,metadata:()=>h,toc:()=>p});var n=a(8168),i=a(8587),r=(a(6540),a(5680)),o=a(3973),l=a(8478);const s=["components"],c={slug:"manhattan-distance",title:"Manhattan Distance - Optimized Navigation \ud83c\udfd9",description:"Learn how to calculate Manhattan Distance (city block distance) efficiently. Includes optimized algorithms, time complexity analysis, and practical examples.",keywords:["manhattan distance","city block distance","taxicab geometry","L1 distance","manhattan distance algorithm","manhattan distance calculator","manhattan distance formula","manhattan distance python","manhattan distance java"],authors:["gazcn007"],tags:["algorithms","geometry","optimization","distance-calculation","computational-geometry"]},d=void 0,h={unversionedId:"Stories/ManhattanDistance/index",id:"Stories/ManhattanDistance/index",title:"Manhattan Distance - Optimized Navigation \ud83c\udfd9",description:"Learn how to calculate Manhattan Distance (city block distance) efficiently. Includes optimized algorithms, time complexity analysis, and practical examples.",source:"@site/docs/Stories/ManhattanDistance/index.md",sourceDirName:"Stories/ManhattanDistance",slug:"/Stories/ManhattanDistance/manhattan-distance",permalink:"/Stories/ManhattanDistance/manhattan-distance",draft:!1,tags:[{label:"algorithms",permalink:"/tags/algorithms"},{label:"geometry",permalink:"/tags/geometry"},{label:"optimization",permalink:"/tags/optimization"},{label:"distance-calculation",permalink:"/tags/distance-calculation"},{label:"computational-geometry",permalink:"/tags/computational-geometry"}],version:"current",frontMatter:{slug:"manhattan-distance",title:"Manhattan Distance - Optimized Navigation \ud83c\udfd9",description:"Learn how to calculate Manhattan Distance (city block distance) efficiently. Includes optimized algorithms, time complexity analysis, and practical examples.",keywords:["manhattan distance","city block distance","taxicab geometry","L1 distance","manhattan distance algorithm","manhattan distance calculator","manhattan distance formula","manhattan distance python","manhattan distance java"],authors:["gazcn007"],tags:["algorithms","geometry","optimization","distance-calculation","computational-geometry"]},sidebar:"Stories",next:{title:"React Fiber - The Game Changer \u269b\ufe0f",permalink:"/Stories/ReactFiber/intro-to-react-fiber"}},m={},p=[{value:"Finding the Farthest Friends",id:"finding-the-farthest-friends",level:2},{value:"The Brute-Force Approach: Checking Every Pair",id:"the-brute-force-approach-checking-every-pair",level:2},{value:"The Trick: Reducing the Problem with Linear Forms",id:"the-trick-reducing-the-problem-with-linear-forms",level:2},{value:"Real-World Applications",id:"real-world-applications",level:2},{value:"Related Problems",id:"related-problems",level:3}],g={toc:p},u="wrapper";function y(t){let{components:e}=t,a=(0,i.A)(t,s);return(0,r.yg)(u,(0,n.A)({},g,a,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"finding-the-farthest-friends"},"Finding the Farthest Friends"),(0,r.yg)("p",null,"Imagine you\u2019re hanging out with six friends in a city with a perfect grid layout, like New York. Each of your friends is standing at different street corners, and you\u2019re all wondering: Which two of us are the farthest apart, according to the Manhattan distance?"),(0,r.yg)("p",null,"If you\u2019re not familiar with it, Manhattan distance is like how a taxi drives in a grid-based city. It\u2019s the sum of the horizontal and vertical distances between two points, not the straight line (diagonal) distance. For example, if your friend is 3 blocks east and 4 blocks north of you, the Manhattan distance is:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"3 blocks east + 4 blocks north = 7 blocks"))),(0,r.yg)("p",null,"Now, to find out which two friends are the farthest apart, you might think:\n\u201cLet\u2019s just have everyone check their distance to everyone else and pick the largest.\u201d"),(0,r.yg)("h2",{id:"the-brute-force-approach-checking-every-pair"},"The Brute-Force Approach: Checking Every Pair"),(0,r.yg)("admonition",{title:"Playground",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"This is the brute-force approach, which is not efficient."),(0,r.yg)(l.A,{mdxType:"BrowserOnly"},(()=>(0,r.yg)(o.y2,{mdxType:"ManhattanDistanceBruteForceStory"})))),(0,r.yg)("p",null,"In our group of six friends, there are 15 unique pairs (since each pair is counted once). That means we\u2019d need to calculate the Manhattan distance for each pair, and then find the largest. If we had 10 friends, there would be 45 pairs. With 100 friends? A whopping 4,950 pairs! - ",(0,r.yg)("strong",{parentName:"p"},"This approach as having O(n\xb2) runtime complexity.")),(0,r.yg)("h2",{id:"the-trick-reducing-the-problem-with-linear-forms"},"The Trick: Reducing the Problem with Linear Forms"),(0,r.yg)("p",null,"Here's the key insight: The maximum Manhattan distance can be determined by calculating the distances between each point and the four corners of the bounding box (top-left, top-right, bottom-left, bottom-right), then finding the difference between the maximum and minimum distances. This reduces the time complexity from O(n\xb2) to O(n)."),(0,r.yg)("admonition",{title:"Playground",type:"info"},(0,r.yg)(l.A,{mdxType:"BrowserOnly"},(()=>(0,r.yg)(o.O5,{mdxType:"ManhattanDistanceOptimizedStory"})))),(0,r.yg)("p",null,"Runtime Analysis:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Compute the values of  x+y ,  x-y ,  -x+y , and  -x-y  for all  n  points:  O(n) "),(0,r.yg)("li",{parentName:"ol"},"Find the maximum and minimum for each of the four linear forms:  O(n) "),(0,r.yg)("li",{parentName:"ol"},"Compute the differences between the max and min for each form:  O(1) ")),(0,r.yg)("p",null,"Thus, the overall runtime is: ",(0,r.yg)("strong",{parentName:"p"},"O(n)")),(0,r.yg)("h2",{id:"real-world-applications"},"Real-World Applications"),(0,r.yg)("p",null,"This trick isn't just for finding the farthest friends on a grid. It has some exciting real-world applications:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Application"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Urban Planning"),(0,r.yg)("td",{parentName:"tr",align:null},"City planners use Manhattan distance to model traffic patterns or design delivery routes in grid-based cities. The algorithm helps optimize which delivery points are farthest apart to allocate resources.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Cluster Analysis in Data Science"),(0,r.yg)("td",{parentName:"tr",align:null},"When analyzing data points in a grid-like feature space, Manhattan distance can help determine the spread of data or the maximum separation between clusters.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Network Design"),(0,r.yg)("td",{parentName:"tr",align:null},"In networking, Manhattan distance is used to optimize layouts for computer chips or communication nodes.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Game Development"),(0,r.yg)("td",{parentName:"tr",align:null},"Grid-based games (like chess or strategy games) often use Manhattan distance to calculate movement or range between characters.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Robotics and Pathfinding"),(0,r.yg)("td",{parentName:"tr",align:null},"Robots navigating through grid-like environments, such as warehouses, use Manhattan distance to determine optimal paths.")))),(0,r.yg)("h3",{id:"related-problems"},"Related Problems"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/QuestionBank/Leetcode/LC1131"},"1131. Maximum of Absolute Value Expression")))}y.isMDXComponent=!0}}]);