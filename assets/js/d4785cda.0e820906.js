"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[8211],{8478:(e,t,a)=>{a.d(t,{A:()=>i});var n=a(6540),l=a(2303);function i(e){let{children:t,fallback:a}=e;return(0,l.A)()?n.createElement(n.Fragment,null,null==t?void 0:t()):null!=a?a:null}},259:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>g,default:()=>h,frontMatter:()=>d,metadata:()=>p,toc:()=>m});var n=a(8168),l=a(8587),i=(a(6540),a(5680)),r=a(4082),s=a(8478);const o=["components"],d={id:"BTree",title:"B Tree",sidebar_label:"B Tree",head:[{tag:"link",attributes:{rel:"stylesheet",href:"/css/sorting.css",precedence:"high"}}]},g="B+ Tree",p={unversionedId:"DataStructures/Basic/BTree/BTree",id:"DataStructures/Basic/BTree/BTree",title:"B Tree",description:"Overview",source:"@site/docs/DataStructures/Basic/BTree/BPlusTree.md",sourceDirName:"DataStructures/Basic/BTree",slug:"/DataStructures/Basic/BTree/BTree",permalink:"/docs/DataStructures/Basic/BTree/BTree",draft:!1,tags:[],version:"current",frontMatter:{id:"BTree",title:"B Tree",sidebar_label:"B Tree",head:[{tag:"link",attributes:{rel:"stylesheet",href:"/css/sorting.css",precedence:"high"}}]},sidebar:"Data Structure",previous:{title:"Lowest Common Ancestor of a Binary Tree",permalink:"/docs/QuestionBank/Leetcode/LC236"},next:{title:"Introduction",permalink:"/docs/DataStructures/Basic/LinkedList/Introduction"}},u={},m=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"Insertion Process",id:"insertion-process",level:2},{value:"Insertion Steps",id:"insertion-steps",level:3},{value:"Deletion Process",id:"deletion-process",level:2},{value:"Deletion Steps",id:"deletion-steps",level:3},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Advantages",id:"advantages",level:2},{value:"Disadvantages",id:"disadvantages",level:2},{value:"Implementation Example",id:"implementation-example",level:2},{value:"References",id:"references",level:2}],y={toc:m},c="wrapper";function h(e){let{components:t}=e,a=(0,l.A)(e,o);return(0,i.yg)(c,(0,n.A)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"b-tree"},"B+ Tree"),(0,i.yg)("h2",{id:"overview"},"Overview"),(0,i.yg)("p",null,"A B+ tree is a self-balancing tree data structure that maintains sorted data and allows for efficient insertion, deletion, and search operations. Unlike regular B-trees, B+ trees store all data in leaf nodes, with internal nodes only storing keys for navigation."),(0,i.yg)("h2",{id:"properties"},"Properties"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"All leaves are at the same level"),(0,i.yg)("li",{parentName:"ul"},"Nodes are at least half full"),(0,i.yg)("li",{parentName:"ul"},"Data is stored only in leaf nodes"),(0,i.yg)("li",{parentName:"ul"},"Leaf nodes are linked for efficient range queries"),(0,i.yg)("li",{parentName:"ul"},"Height remains balanced automatically")),(0,i.yg)("h2",{id:"insertion-process"},"Insertion Process"),(0,i.yg)("p",null,"Watch how elements are inserted into a B+ tree:"),(0,i.yg)(s.A,{mdxType:"BrowserOnly"},(()=>(0,i.yg)(r.il,{mdxType:"BPlusTreeInsertion"}))),(0,i.yg)("h3",{id:"insertion-steps"},"Insertion Steps"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Find the appropriate leaf node"),(0,i.yg)("li",{parentName:"ol"},"If leaf has space, insert the key"),(0,i.yg)("li",{parentName:"ol"},"If leaf is full:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Split the node"),(0,i.yg)("li",{parentName:"ul"},"Create new internal node if needed"),(0,i.yg)("li",{parentName:"ul"},"Redistribute keys"))),(0,i.yg)("li",{parentName:"ol"},"Update parent nodes as needed")),(0,i.yg)("h2",{id:"deletion-process"},"Deletion Process"),(0,i.yg)("p",null,"Watch how elements are deleted from a B+ tree:"),(0,i.yg)(s.A,{mdxType:"BrowserOnly"},(()=>(0,i.yg)(r.xz,{mdxType:"BPlusTreeDeletion"}))),(0,i.yg)("h3",{id:"deletion-steps"},"Deletion Steps"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Find the leaf node containing the key"),(0,i.yg)("li",{parentName:"ol"},"Remove the key"),(0,i.yg)("li",{parentName:"ol"},"If node becomes underfull:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Try borrowing from siblings"),(0,i.yg)("li",{parentName:"ul"},"Merge with sibling if borrowing not possible"))),(0,i.yg)("li",{parentName:"ol"},"Update parent nodes and possibly reduce tree height")),(0,i.yg)("h2",{id:"time-complexity"},"Time Complexity"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Operation"),(0,i.yg)("th",{parentName:"tr",align:null},"Average Case"),(0,i.yg)("th",{parentName:"tr",align:null},"Worst Case"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Search"),(0,i.yg)("td",{parentName:"tr",align:null},"O(log n)"),(0,i.yg)("td",{parentName:"tr",align:null},"O(log n)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Insert"),(0,i.yg)("td",{parentName:"tr",align:null},"O(log n)"),(0,i.yg)("td",{parentName:"tr",align:null},"O(log n)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Delete"),(0,i.yg)("td",{parentName:"tr",align:null},"O(log n)"),(0,i.yg)("td",{parentName:"tr",align:null},"O(log n)")))),(0,i.yg)("h2",{id:"space-complexity"},"Space Complexity"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"O(n) where n is the number of keys")),(0,i.yg)("h2",{id:"use-cases"},"Use Cases"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Database indexing"),(0,i.yg)("li",{parentName:"ol"},"File systems"),(0,i.yg)("li",{parentName:"ol"},"Multilevel indexing"),(0,i.yg)("li",{parentName:"ol"},"Range queries"),(0,i.yg)("li",{parentName:"ol"},"Sequential access optimization")),(0,i.yg)("h2",{id:"advantages"},"Advantages"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Balanced height ensures consistent performance"),(0,i.yg)("li",{parentName:"ol"},"Efficient range queries via leaf node links"),(0,i.yg)("li",{parentName:"ol"},"High fanout reduces tree height"),(0,i.yg)("li",{parentName:"ol"},"Good for disk-based storage systems")),(0,i.yg)("h2",{id:"disadvantages"},"Disadvantages"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Complex implementation"),(0,i.yg)("li",{parentName:"ol"},"Extra space overhead"),(0,i.yg)("li",{parentName:"ol"},"Rebalancing operations can be costly")),(0,i.yg)("h2",{id:"implementation-example"},"Implementation Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"class BPlusTreeNode {\n    boolean isLeaf;\n    List<Integer> keys;\n    List<BPlusTreeNode> children;\n    BPlusTreeNode next;  // For leaf node linking\n    \n    public BPlusTreeNode(boolean leaf) {\n        this.isLeaf = leaf;\n        this.keys = new ArrayList<>();\n        this.children = new ArrayList<>();\n        this.next = null;\n    }\n}\n\nclass BPlusTree {\n    private BPlusTreeNode root;\n    private int t;  // Minimum degree\n    \n    public BPlusTree(int t) {\n        this.root = new BPlusTreeNode(true);\n        this.t = t;\n    }\n    \n    public void insert(int key) {\n        // Implementation details...\n    }\n    \n    public void delete(int key) {\n        // Implementation details...\n    }\n}\n")),(0,i.yg)("h2",{id:"references"},"References"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.amazon.com/Database-Management-Systems-Raghu-Ramakrishnan/dp/0072465638"},"Database Management Systems (3rd Edition)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://mitpress.mit.edu/books/introduction-algorithms-fourth-edition"},"Introduction to Algorithms (CLRS)"))))}h.isMDXComponent=!0}}]);