"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[9770],{8478:(e,a,t)=>{t.d(a,{A:()=>i});var r=t(6540),n=t(2303);function i(e){let{children:a,fallback:t}=e;return(0,n.A)()?r.createElement(r.Fragment,null,null==a?void 0:a()):null!=t?t:null}},5247:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>p,default:()=>v,frontMatter:()=>d,metadata:()=>m,toc:()=>u});var r=t(8168),n=t(8587),i=(t(6540),t(5680)),l=t(3973),s=t(8478);const o=["components"],d={id:"OddEvenSort",title:"Odd-Even Sort",sidebar_label:"Odd-Even Sort",description:"Learn Odd-Even Sort algorithm with interactive visualization. Understand how odd-even sort (brick sort) works with step-by-step examples and implementation.",keywords:["odd even sort","brick sort","sorting algorithm","algorithm visualization","computer science","data structures","comparison sort","parallel sorting","distributed sorting"]},p=void 0,m={unversionedId:"Algorithms/Sorting/OddEvenSort",id:"Algorithms/Sorting/OddEvenSort",title:"Odd-Even Sort",description:"Learn Odd-Even Sort algorithm with interactive visualization. Understand how odd-even sort (brick sort) works with step-by-step examples and implementation.",source:"@site/docs/Algorithms/Sorting/OddEvenSort.md",sourceDirName:"Algorithms/Sorting",slug:"/Algorithms/Sorting/OddEvenSort",permalink:"/Algorithms/Sorting/OddEvenSort",draft:!1,tags:[],version:"current",frontMatter:{id:"OddEvenSort",title:"Odd-Even Sort",sidebar_label:"Odd-Even Sort",description:"Learn Odd-Even Sort algorithm with interactive visualization. Understand how odd-even sort (brick sort) works with step-by-step examples and implementation.",keywords:["odd even sort","brick sort","sorting algorithm","algorithm visualization","computer science","data structures","comparison sort","parallel sorting","distributed sorting"]},sidebar:"Algorithms",previous:{title:"Merge Sort",permalink:"/Algorithms/Sorting/MergeSort"},next:{title:"Selection Sort",permalink:"/Algorithms/Sorting/SelectionSort"}},g={},u=[{value:"Idea",id:"idea",level:2},{value:"Visualization",id:"visualization",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Time and Space Analysis",id:"time-and-space-analysis",level:2},{value:"Properties",id:"properties",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Advantages Over Bubble Sort",id:"advantages-over-bubble-sort",level:2},{value:"References",id:"references",level:2}],c={toc:u},h="wrapper";function v(e){let{components:a}=e,t=(0,n.A)(e,o);return(0,i.yg)(h,(0,r.A)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"idea"},"Idea"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Also known as Brick Sort"),(0,i.yg)("li",{parentName:"ul"},"Compare all (odd,even) indexed pairs of adjacent elements"),(0,i.yg)("li",{parentName:"ul"},"If a pair is in the wrong order, switch elements"),(0,i.yg)("li",{parentName:"ul"},"Then alternate between (odd,even) and (even,odd) pairs"),(0,i.yg)("li",{parentName:"ul"},"Similar to bubble sort but with a different pattern of comparisons")),(0,i.yg)("h2",{id:"visualization"},"Visualization"),(0,i.yg)("br",null),(0,i.yg)(s.A,{mdxType:"BrowserOnly"},(()=>(0,i.yg)(l.Nj,{data:[[6,3,8,1,5,2,7,4],[6,3,8,1,5,2,7,4],[3,6,1,8,2,5,4,7],[3,6,1,8,2,5,4,7],[3,1,6,2,8,4,5,7],[3,1,6,2,8,4,5,7],[1,3,2,6,4,8,5,7],[1,3,2,6,4,8,5,7],[1,2,3,4,6,5,8,7],[1,2,3,4,6,5,8,7],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]],steps:["Initial array","Start even phase: Compare (0,1),(2,3),(4,5),(6,7) pairs","After even phase swaps: [3,6,1,8,2,5,4,7]","Start odd phase: Compare (1,2),(3,4),(5,6) pairs","After odd phase swaps: [3,1,6,2,8,4,5,7]","Start even phase: Compare (0,1),(2,3),(4,5),(6,7) pairs","After even phase swaps: [1,3,2,6,4,8,5,7]","Start odd phase: Compare (1,2),(3,4),(5,6) pairs","After odd phase swaps: [1,2,3,4,6,5,8,7]","Start even phase: Compare (0,1),(2,3),(4,5),(6,7) pairs","After final swaps: [1,2,3,4,5,6,7,8]","Final sorted array"],mdxType:"Sorting"}))),(0,i.yg)("h2",{id:"how-it-works"},"How It Works"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"The algorithm divides sorting into two phases:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Even phase: Compare and swap elements at even indices with their next element"),(0,i.yg)("li",{parentName:"ul"},"Odd phase: Compare and swap elements at odd indices with their next element"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"In each phase:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Even phase compares (0,1), (2,3), (4,5), etc."),(0,i.yg)("li",{parentName:"ul"},"Odd phase compares (1,2), (3,4), (5,6), etc."))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"The phases alternate until no more swaps are needed"))),(0,i.yg)("h2",{id:"implementation"},"Implementation"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public class OddEvenSort {\n    public static void sort(int[] arr) {\n        if (arr == null || arr.length <= 1) {\n            return;\n        }\n        boolean sorted = false;\n        int len = arr.length;\n        while (!sorted) {\n            sorted = true;\n            // Even phase: (even,odd) pairs\n            for (int i = 0; i < len-1; i += 2) {\n                if (arr[i] > arr[i+1]) {\n                    swap(arr, i, i+1);\n                    sorted = false;\n                }\n            }\n            // Odd phase: (odd,even) pairs\n            for (int i = 1; i < len-1; i += 2) {\n                if (arr[i] > arr[i+1]) {\n                    swap(arr, i, i+1);\n                    sorted = false;\n                }\n            }\n        }\n    }\n\n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n")),(0,i.yg)("h2",{id:"time-and-space-analysis"},"Time and Space Analysis"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Time Complexity:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Best Case: O(n) when array is already sorted"),(0,i.yg)("li",{parentName:"ul"},"Average Case: O(n\xb2)"),(0,i.yg)("li",{parentName:"ul"},"Worst Case: O(n\xb2)"))),(0,i.yg)("li",{parentName:"ul"},"Space Complexity: O(1) as it sorts in-place")),(0,i.yg)("h2",{id:"properties"},"Properties"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Stable sorting algorithm"),(0,i.yg)("li",{parentName:"ul"},"In-place algorithm"),(0,i.yg)("li",{parentName:"ul"},"Parallel implementation possible (all even/odd comparisons can be done simultaneously)"),(0,i.yg)("li",{parentName:"ul"},"Similar to bubble sort but with different comparison pattern"),(0,i.yg)("li",{parentName:"ul"},"Good for parallel processing as comparisons are independent")),(0,i.yg)("h2",{id:"use-cases"},"Use Cases"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Parallel processing environments"),(0,i.yg)("li",{parentName:"ul"},"When stable sort is required"),(0,i.yg)("li",{parentName:"ul"},"When memory space is limited"),(0,i.yg)("li",{parentName:"ul"},"When hardware implementation is needed (easier to implement in hardware)")),(0,i.yg)("h2",{id:"advantages-over-bubble-sort"},"Advantages Over Bubble Sort"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Better parallel implementation"),(0,i.yg)("li",{parentName:"ol"},"More cache-friendly in some cases"),(0,i.yg)("li",{parentName:"ol"},"Can be implemented efficiently in hardware"),(0,i.yg)("li",{parentName:"ol"},"All comparisons in a phase are independent")),(0,i.yg)("h2",{id:"references"},"References"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/odd-even-sort-brick-sort/"},"Odd Even Sort / Brick Sort - GeeksforGeeks")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.sciencedirect.com/science/article/abs/pii/0167819181900146"},"Parallel Odd-Even Sort Algorithm"))))}v.isMDXComponent=!0}}]);