"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[332],{5680:(e,r,n)=>{n.d(r,{xA:()=>v,yg:()=>u});var t=n(6540);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},v=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},c=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,v=o(e,["components","mdxType","originalType","parentName"]),g=p(n),c=i,u=g["".concat(s,".").concat(c)]||g[c]||m[c]||a;return n?t.createElement(u,l(l({ref:r},v),{},{components:n})):t.createElement(u,l({ref:r},v))}));function u(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=c;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[g]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8417:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>v,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>g});var t=n(8168),i=n(8587),a=(n(6540),n(5680));const l=["components"],o={id:"MergeIntervals",title:"Merge Intervals Pattern",sidebar_label:"Merge Intervals",description:"Learn how to solve interval merging problems with step-by-step explanations and examples. Master techniques for handling overlapping intervals in programming interviews.",keywords:["merge intervals","interval algorithms","overlapping intervals","algorithm patterns","interval merging","coding interview","computer science","data structures","interval problems","programming techniques"]},s=void 0,p={unversionedId:"Algorithms/Interval/MergeIntervals",id:"Algorithms/Interval/MergeIntervals",title:"Merge Intervals Pattern",description:"Learn how to solve interval merging problems with step-by-step explanations and examples. Master techniques for handling overlapping intervals in programming interviews.",source:"@site/docs/Algorithms/Interval/MergeIntervals.md",sourceDirName:"Algorithms/Interval",slug:"/Algorithms/Interval/MergeIntervals",permalink:"/Algorithms/Interval/MergeIntervals",draft:!1,tags:[],version:"current",frontMatter:{id:"MergeIntervals",title:"Merge Intervals Pattern",sidebar_label:"Merge Intervals",description:"Learn how to solve interval merging problems with step-by-step explanations and examples. Master techniques for handling overlapping intervals in programming interviews.",keywords:["merge intervals","interval algorithms","overlapping intervals","algorithm patterns","interval merging","coding interview","computer science","data structures","interval problems","programming techniques"]},sidebar:"Algorithms",previous:{title:"Line Sweep",permalink:"/Algorithms/Interval/LineSweep"},next:{title:"Bit Manipulation Operations and Tricks",permalink:"/Algorithms/BitManipulation/bit-manipulation"}},v={},g=[{value:"Pattern Description",id:"pattern-description",level:2},{value:"Common Problems",id:"common-problems",level:2},{value:"1. Merge Overlapping Intervals",id:"1-merge-overlapping-intervals",level:3},{value:"2. Insert Interval",id:"2-insert-interval",level:3},{value:"3. Interval List Intersections",id:"3-interval-list-intersections",level:3},{value:"4. Non-overlapping Intervals",id:"4-non-overlapping-intervals",level:3},{value:"5. Meeting Rooms",id:"5-meeting-rooms",level:3},{value:"Common Techniques",id:"common-techniques",level:2}],m={toc:g},c="wrapper";function u(e){let{components:r}=e,n=(0,i.A)(e,l);return(0,a.yg)(c,(0,t.A)({},m,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"pattern-description"},"Pattern Description"),(0,a.yg)("p",null,"The Merge Intervals pattern deals with problems involving overlapping intervals. These problems typically require:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Sorting intervals by start time"),(0,a.yg)("li",{parentName:"ol"},"Merging overlapping intervals"),(0,a.yg)("li",{parentName:"ol"},"Finding intersections or unions of intervals")),(0,a.yg)("h2",{id:"common-problems"},"Common Problems"),(0,a.yg)("h3",{id:"1-merge-overlapping-intervals"},"1. Merge Overlapping Intervals"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"public int[][] merge(int[][] intervals) {\n    if (intervals.length <= 1) return intervals;\n    \n    // Sort by start time\n    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n    \n    List<int[]> result = new ArrayList<>();\n    int[] currentInterval = intervals[0];\n    result.add(currentInterval);\n    \n    for (int[] interval : intervals) {\n        if (interval[0] <= currentInterval[1]) {\n            currentInterval[1] = Math.max(currentInterval[1], interval[1]);\n        } else {\n            currentInterval = interval;\n            result.add(currentInterval);\n        }\n    }\n    \n    return result.toArray(new int[result.size()][]);\n}\n")),(0,a.yg)("h3",{id:"2-insert-interval"},"2. Insert Interval"),(0,a.yg)("h3",{id:"3-interval-list-intersections"},"3. Interval List Intersections"),(0,a.yg)("h3",{id:"4-non-overlapping-intervals"},"4. Non-overlapping Intervals"),(0,a.yg)("h3",{id:"5-meeting-rooms"},"5. Meeting Rooms"),(0,a.yg)("h2",{id:"common-techniques"},"Common Techniques"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Sort intervals by start/end time"),(0,a.yg)("li",{parentName:"ol"},"Track previous interval"),(0,a.yg)("li",{parentName:"ol"},"Use min-heap for meeting rooms"),(0,a.yg)("li",{parentName:"ol"},"Merge overlapping intervals"),(0,a.yg)("li",{parentName:"ol"},"Count overlapping intervals")))}u.isMDXComponent=!0}}]);