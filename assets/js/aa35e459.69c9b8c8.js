"use strict";(self.webpackChunkpatternize_io=self.webpackChunkpatternize_io||[]).push([[1556],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>c});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),g=s(n),y=i,c=g["".concat(p,".").concat(y)]||g[y]||u[y]||r;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=y;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>g});var a=n(8168),i=n(8587),r=(n(6540),n(5680));const l=["components"],o={slug:"bit-manipulation",title:"Bit Manipulation Operations and Tricks",description:"Learn essential bit manipulation operations and common tricks in programming. Includes detailed explanations of bitwise operators, examples, and practical applications.",keywords:["bit manipulation","bitwise operators","bit operations","bit tricks","programming","binary operations","AND","OR","XOR","bit shifting"],tags:["BitManipulation","BinaryOperations","Programming"]},p="Common Bit Manipulation Operations",s={unversionedId:"Algorithms/BitManipulation/Introduction",id:"Algorithms/BitManipulation/Introduction",title:"Bit Manipulation Operations and Tricks",description:"Learn essential bit manipulation operations and common tricks in programming. Includes detailed explanations of bitwise operators, examples, and practical applications.",source:"@site/docs/Algorithms/BitManipulation/Introduction.md",sourceDirName:"Algorithms/BitManipulation",slug:"/Algorithms/BitManipulation/bit-manipulation",permalink:"/Algorithms/BitManipulation/bit-manipulation",draft:!1,tags:[{label:"BitManipulation",permalink:"/tags/bit-manipulation"},{label:"BinaryOperations",permalink:"/tags/binary-operations"},{label:"Programming",permalink:"/tags/programming"}],version:"current",frontMatter:{slug:"bit-manipulation",title:"Bit Manipulation Operations and Tricks",description:"Learn essential bit manipulation operations and common tricks in programming. Includes detailed explanations of bitwise operators, examples, and practical applications.",keywords:["bit manipulation","bitwise operators","bit operations","bit tricks","programming","binary operations","AND","OR","XOR","bit shifting"],tags:["BitManipulation","BinaryOperations","Programming"]},sidebar:"Algorithms",previous:{title:"Merge Intervals",permalink:"/Algorithms/Interval/MergeIntervals"}},m={},g=[{value:"Basic Operations",id:"basic-operations",level:2},{value:"Common Bit Manipulation Tricks",id:"common-bit-manipulation-tricks",level:2},{value:"Check if Power of 2",id:"check-if-power-of-2",level:3},{value:"Get Last Set Bit",id:"get-last-set-bit",level:3},{value:"Clear Lowest Set Bit",id:"clear-lowest-set-bit",level:3},{value:"Count Set Bits",id:"count-set-bits",level:3},{value:"Check if Number is Negative",id:"check-if-number-is-negative",level:3},{value:"Swap Two Numbers",id:"swap-two-numbers",level:3}],u={toc:g},y="wrapper";function c(e){let{components:t}=e,n=(0,i.A)(e,l);return(0,r.yg)(y,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"common-bit-manipulation-operations"},"Common Bit Manipulation Operations"),(0,r.yg)("h2",{id:"basic-operations"},"Basic Operations"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Operation"),(0,r.yg)("th",{parentName:"tr",align:null},"Symbol"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Example"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"AND"),(0,r.yg)("td",{parentName:"tr",align:null},"&"),(0,r.yg)("td",{parentName:"tr",align:null},"Returns 1 only if both bits are 1"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"5 & 3 = 1")," (0101 & 0011 = 0001)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"OR"),(0,r.yg)("td",{parentName:"tr",align:null},"|"),(0,r.yg)("td",{parentName:"tr",align:null},"Returns 1 if either bit is 1"),(0,r.yg)("td",{parentName:"tr",align:null},"`5")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"XOR"),(0,r.yg)("td",{parentName:"tr",align:null},"^"),(0,r.yg)("td",{parentName:"tr",align:null},"Returns 1 if bits are different"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"5 ^ 3 = 6")," (0101 ^ 0011 = 0110)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"NOT"),(0,r.yg)("td",{parentName:"tr",align:null},"~"),(0,r.yg)("td",{parentName:"tr",align:null},"Inverts all bits"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"~5 = -6")," (Inverts 0101 to 1010)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Left Shift"),(0,r.yg)("td",{parentName:"tr",align:null},"<<"),(0,r.yg)("td",{parentName:"tr",align:null},"Shifts bits left by b positions"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"5 << 1 = 10")," (0101 -> 1010)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Right Shift"),(0,r.yg)("td",{parentName:"tr",align:null},">>"),(0,r.yg)("td",{parentName:"tr",align:null},"Shifts bits right by b positions"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"5 >> 1 = 2")," (0101 -> 0010)")))),(0,r.yg)("h2",{id:"common-bit-manipulation-tricks"},"Common Bit Manipulation Tricks"),(0,r.yg)("h3",{id:"check-if-power-of-2"},"Check if Power of 2"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"n & (n-1) == 0")," checks if n is a power of 2"),(0,r.yg)("li",{parentName:"ul"},"Works because powers of 2 have exactly one 1 bit"),(0,r.yg)("li",{parentName:"ul"},"Example: ",(0,r.yg)("inlineCode",{parentName:"li"},"8 & 7 = 0")," (1000 & 0111 = 0000)")),(0,r.yg)("h3",{id:"get-last-set-bit"},"Get Last Set Bit"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"n & -n")," isolates the rightmost 1 bit"),(0,r.yg)("li",{parentName:"ul"},"Example: ",(0,r.yg)("inlineCode",{parentName:"li"},"12 & -12 = 4")," (1100 & 0100 = 0100)")),(0,r.yg)("h3",{id:"clear-lowest-set-bit"},"Clear Lowest Set Bit"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"n & (n-1)")," clears the rightmost 1 bit"),(0,r.yg)("li",{parentName:"ul"},"Example: ",(0,r.yg)("inlineCode",{parentName:"li"},"12 & 11 = 8")," (1100 & 1011 = 1000)")),(0,r.yg)("h3",{id:"count-set-bits"},"Count Set Bits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"n & (n-1)")," clears the rightmost 1 bit"),(0,r.yg)("li",{parentName:"ul"},"Example: ",(0,r.yg)("inlineCode",{parentName:"li"},"12 & 11 = 8")," (1100 & 1011 = 1000)")),(0,r.yg)("h3",{id:"check-if-number-is-negative"},"Check if Number is Negative"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"n < 0")," checks if the number is negative"),(0,r.yg)("li",{parentName:"ul"},"Example: ",(0,r.yg)("inlineCode",{parentName:"li"},"-1 < 0")," (True)")),(0,r.yg)("h3",{id:"swap-two-numbers"},"Swap Two Numbers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"a ^= b; b ^= a; a ^= b;")," swaps two numbers without using a temporary variable"),(0,r.yg)("li",{parentName:"ul"},"Example: ",(0,r.yg)("inlineCode",{parentName:"li"},"a = 5, b = 3")," -> ",(0,r.yg)("inlineCode",{parentName:"li"},"a = 3, b = 5"))))}c.isMDXComponent=!0}}]);