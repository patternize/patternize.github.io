(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{149:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),l=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},h=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),h=r,b=p["".concat(a,".").concat(h)]||p[h]||d[h]||i;return t?o.a.createElement(b,s(s({ref:n},u),{},{components:t})):o.a.createElement(b,s({ref:n},u))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},94:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var r=t(3),o=t(7),i=(t(0),t(149)),a={id:"ExpressionPuzzle",title:"Expression Puzzle",sidebar_label:"Expression Puzzle"},s={unversionedId:"Patterns/Backtracking/ExpressionPuzzle",id:"Patterns/Backtracking/ExpressionPuzzle",isDocsHomePage:!1,title:"Expression Puzzle",description:"Problem Description",source:"@site/docs/Patterns/Backtracking/ExpressionPuzzle.md",slug:"/Patterns/Backtracking/ExpressionPuzzle",permalink:"/docs/Patterns/Backtracking/ExpressionPuzzle",version:"current",sidebar_label:"Expression Puzzle",sidebar:"Patterns",previous:{title:"Permutation of Elements",permalink:"/docs/Patterns/Backtracking/Permutation/Permutation"},next:{title:"Coordinate-based Dynamic Programming",permalink:"/docs/Patterns/DynamicProgramming/Coordinate/intro"}},c=[{value:"Problem Description",id:"problem-description",children:[]},{value:"Reduction",id:"reduction",children:[{value:"Decomposition",id:"decomposition",children:[]},{value:"Step 1: Find a way to validate the proposed solution",id:"step-1-find-a-way-to-validate-the-proposed-solution",children:[]},{value:"Step 2: Use backtracking to solve the problem",id:"step-2-use-backtracking-to-solve-the-problem",children:[]}]},{value:"Solution",id:"solution",children:[]}],u={toc:c};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"problem-description"},"Problem Description"),Object(i.b)("p",null,"I was asked this question by my friend the other day.\nSay you are given a mathematically equation in an encoded form. Would it be possible to assign values to characters in an express so that it is valid:"),Object(i.b)("p",null,"Ex.1:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"For expression \"ABC\" + \"ABC\" = \"DEA\"\nThe assignment {'A': 2, 'B': 3, 'C': 1, 'D': 4, 'E': 6} will make the expression true:\nif we subsitute the numbers to their according letters:\nthe expression becomes 231  +  231  =  462 (which is valid)\n\nThe other assignments could be:\n432 + 432 = 864\n281 + 281 = 562\n271 + 271 = 542\n")),Object(i.b)("p",null,"Ex.2:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"For expression \"AA\" + \"B\" = \"CDE\"\nThe assignment {'A':9, 'B': 3, 'C': 1, 'D': 0, 'E': 2} will make the expression true:\nif we subsitute the numbers to their according letters:\nthe expression becomes 99  +  3  =  102 (which is valid)\n")),Object(i.b)("h2",{id:"reduction"},"Reduction"),Object(i.b)("h3",{id:"decomposition"},"Decomposition"),Object(i.b)("p",null,"This is obviously not an easy problem because there isn't a strict mathematical formula to solve this problem."),Object(i.b)("p",null,"However, if we can find a way to validate an assignment, we can use backtracking to enumerate and explore all possible combinations."),Object(i.b)("h3",{id:"step-1-find-a-way-to-validate-the-proposed-solution"},"Step 1: Find a way to validate the proposed solution"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'int getNumber(String s, Map<Character, Integer> proposedSolution){\n    int num = 0;\n    for(int i = 0; i < s.length(); i++){\n        char c = s.charAt(i);\n        num = num * 10 + proposedSolution.get(c);\n    }\n    return num;\n}\n\n// Checks whether or not the proposedSolution is correct.\n// E.g., puzzle={"ONE", "ONE", "TWO"}, proposedSolution={O: 2, N:3, E:1, T:4, W:6} -> true\nboolean checkSolution(Map<Character, Integer> proposedSolution) {\n    int firstNum = getNumber(first, proposedSolution);\n    int secondNum = getNumber(second, proposedSolution);\n    int res = getNumber(result, proposedSolution);\n    return firstNum + secondNum == res;\n}\n')),Object(i.b)("h3",{id:"step-2-use-backtracking-to-solve-the-problem"},"Step 2: Use backtracking to solve the problem"),Object(i.b)("p",null,"Now, since we have a validation function ",Object(i.b)("inlineCode",{parentName:"p"},"checkSolution")," to check if a solution is valid, we have the successful base case for our backtracking algorithm. We can go ahead and implement the solution:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"Set<Character> getCharSet(){\n    Set<Character> set = new HashSet<Character>();\n    for(int i = 0; i < first.length(); i++){\n        set.add(first.charAt(i));\n    }\n    for(int i = 0; i < second.length(); i++){\n        set.add(second.charAt(i));\n    }\n    for(int i = 0; i < result.length(); i++){\n        set.add(result.charAt(i));\n    }\n    return set;\n}\n\nboolean getNextNum(Map<Character, Integer> proposalMap, Set<Integer> usedDigits, char[] charArr, int pos){\n    if(pos == charArr.length){\n        if(checkSolution(proposalMap)){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    for(int i = 0; i < 10; i++){\n        if(usedDigits.contains(i)) continue;\n        usedDigits.add(i);\n        proposalMap.put(charArr[pos], i);\n        if(getNextNum(proposalMap, usedDigits, charArr, pos+1)){\n            return true;\n        }\n        usedDigits.remove(i);\n    }\n    return false;\n}\n")),Object(i.b)("h2",{id:"solution"},"Solution"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'class Puzzle{\n    String first = ""; // e.g., "ONE"\n    String second = ""; // e.g., "ONE"\n    String result = ""; // e.g., "TWO"\n    Set<Character> set;\n    \n    public Puzzle(String a, String b, String c){\n        this.first = a;\n        this.second = b;\n        this.result = c;\n        this.set = getCharSet();\n        System.out.println(set);\n    }\n\n    int getNumber(String s, Map<Character, Integer> proposedSolution){\n        int num = 0;\n        for(int i = 0; i < s.length(); i++){\n            char c = s.charAt(i);\n            num = num * 10 + proposedSolution.get(c);\n        }\n        return num;\n    }\n\n    // Checks whether or not the proposedSolution is correct.\n    // E.g., puzzle={"ONE", "ONE", "TWO"}, proposedSolution={O: 2, N:3, E:1, T:4, W:6} -> true\n    boolean checkSolution(Map<Character, Integer> proposedSolution) {\n        int firstNum = getNumber(first, proposedSolution);\n        int secondNum = getNumber(second, proposedSolution);\n        int res = getNumber(result, proposedSolution);\n        return firstNum + secondNum == res;\n    }\n    \n    Set<Character> getCharSet(){\n        Set<Character> set = new HashSet<Character>();\n        for(int i = 0; i < first.length(); i++){\n            set.add(first.charAt(i));\n        }\n        for(int i = 0; i < second.length(); i++){\n            set.add(second.charAt(i));\n        }\n        for(int i = 0; i < result.length(); i++){\n            set.add(result.charAt(i));\n        }\n        return set;\n    }\n    \n    boolean getNextNum(Map<Character, Integer> proposalMap, Set<Integer> usedDigits, char[] charArr, int pos){\n        if(pos == charArr.length){\n            if(checkSolution(proposalMap)){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n\n        for(int i = 0; i < 10; i++){\n            if(usedDigits.contains(i)) continue;\n            usedDigits.add(i);\n            proposalMap.put(charArr[pos], i);\n            if(getNextNum(proposalMap, usedDigits, charArr, pos+1)){\n                return true;\n            }\n            usedDigits.remove(i);\n        }\n        return false;\n    }\n\n    Map<Character, Integer> solve() {\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        Set<Integer> digits = new HashSet<>();\n        char[] charSet = new char[set.size()];\n        int pos =0;\n        for(char c : this.set){\n            charSet[pos++] = c;\n        }\n        if(getNextNum(map, digits, charSet, 0)){\n            return map;\n        }\n        else{\n           return null;\n        }\n    }\n}\n')))}l.isMDXComponent=!0}}]);