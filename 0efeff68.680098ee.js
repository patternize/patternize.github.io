(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),i=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p({},t,{},e)),n},s=function(e){var t=i(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,u=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=i(n),b=r,h=s["".concat(o,".").concat(b)]||s[b]||m[b]||u;return n?a.a.createElement(h,p({ref:t},l,{components:n})):a.a.createElement(h,p({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var u=n.length,o=new Array(u);o[0]=h;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[b]="string"==typeof e?e:r,o[1]=p;for(var l=2;l<u;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(1),a=n(6),u=(n(0),n(116)),o={id:"map",title:"Map",sidebar_label:"Map"},p={id:"Language/Java/map",title:"Map",description:"# Map",source:"@site/docs/Language/Java/Map.md",permalink:"/docs/Language/Java/map",sidebar_label:"Map",sidebar:"Language",previous:{title:"List",permalink:"/docs/Language/Java/list"},next:{title:"Bit Manipulation",permalink:"/docs/Language/Java/bit_manipulation"}},c=[{value:"Iterate Through Values:",id:"iterate-through-values",children:[]},{value:"Put",id:"put",children:[]},{value:"Remove",id:"remove",children:[]},{value:"TreeMap vs HashMap",id:"treemap-vs-hashmap",children:[]}],l={rightToc:c},i="wrapper";function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(u.b)(i,Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(u.b)("h1",{id:"map"},"Map"),Object(u.b)("h2",{id:"iterate-through-values"},"Iterate Through Values:"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"use for loop \u2014 use ",Object(u.b)("inlineCode",{parentName:"li"},"values()")," to iterate through values in a HashMap:")),Object(u.b)("pre",null,Object(u.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"HashMap<Integer, Integer> count = new HashMap<>();\nfor (int i : count.values())\n    res = Math.max(res, i);\nreturn res;\n")),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"use ",Object(u.b)("inlineCode",{parentName:"li"},"Map.Entry<K, V> entry: map.entrySet()")," to iterate through both values and keys:")),Object(u.b)("pre",null,Object(u.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"for(Map.Entry<Character, Integer> entry: hm.entrySet()){\n  entry.getKey();\n  entry.getValue();\n}\n")),Object(u.b)("h2",{id:"put"},"Put"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"Returns previous value in the Key associated:")),Object(u.b)("pre",null,Object(u.b)("code",Object(r.a)({parentName:"pre"},{}),"HashMap hm = new HashMap();\nSystem.out.println(hm.put(1, 1)); // returns Null\nSystem.out.println(hm.put(1, 2)); // 1\nSystem.out.println(hm.put(1, 3)); // 2\n")),Object(u.b)("h2",{id:"remove"},"Remove"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"HashMap remove can uses key as a parameter:\nmap.remove(c); // c is key")),Object(u.b)("h2",{id:"treemap-vs-hashmap"},"TreeMap vs HashMap"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"TreeMap are naturally sorted by order of key, HashMap is not:")),Object(u.b)("pre",null,Object(u.b)("code",Object(r.a)({parentName:"pre"},{}),"TreeMap<Integer, Integer> tm = new TreeMap<>();\ntm.put(3, 1);\ntm.put(2, 2);\ntm.put(1, 10);\ntm.put(-100, 2);\ntm.values(); //[2, 10, 2, 1]\n\nHashMap<Integer, Integer> hm = new HashMap<>();\nhm.put(3, 1);\nhm.put(2, 2);\nhm.put(1, 10);\nhm.put(-100, 2);\nhm.values(); // [10, 2, 1, 2]\n")))}s.isMDXComponent=!0}}]);