(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{103:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return p})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return o}));var n=a(1),r=a(6),u=(a(0),a(112)),p={id:"map",title:"Map",sidebar_label:"Map"},l={id:"DataStructure/map",title:"Map",description:"# Map",source:"@site/docs/DataStructure/Map.md",permalink:"/docs/DataStructure/map",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/DataStructure/Map.md",sidebar_label:"Map",sidebar:"doc",previous:{title:"List",permalink:"/docs/DataStructure/list"},next:{title:"Bit Manipulation",permalink:"/docs/DataStructure/bit_manipulation"}},c=[{value:"Iterate Through Values:",id:"iterate-through-values",children:[]},{value:"Put",id:"put",children:[]},{value:"Remove",id:"remove",children:[]},{value:"TreeMap vs HashMap",id:"treemap-vs-hashmap",children:[]}],i={rightToc:c},s="wrapper";function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(u.b)(s,Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(u.b)("h1",{id:"map"},"Map"),Object(u.b)("h2",{id:"iterate-through-values"},"Iterate Through Values:"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"use for loop \u2014 use ",Object(u.b)("inlineCode",{parentName:"li"},"values()")," to iterate through values in a HashMap:")),Object(u.b)("pre",null,Object(u.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"HashMap<Integer, Integer> count = new HashMap<>();\nfor (int i : count.values())\n    res = Math.max(res, i);\nreturn res;\n")),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"use ",Object(u.b)("inlineCode",{parentName:"li"},"Map.Entry<K, V> entry: map.entrySet()")," to iterate through both values and keys:")),Object(u.b)("pre",null,Object(u.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"for(Map.Entry<Character, Integer> entry: hm.entrySet()){\n  entry.getKey();\n  entry.getValue();\n}\n")),Object(u.b)("h2",{id:"put"},"Put"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"Returns previous value in the Key associated:")),Object(u.b)("pre",null,Object(u.b)("code",Object(n.a)({parentName:"pre"},{}),"HashMap hm = new HashMap();\nSystem.out.println(hm.put(1, 1)); // returns Null\nSystem.out.println(hm.put(1, 2)); // 1\nSystem.out.println(hm.put(1, 3)); // 2\n")),Object(u.b)("h2",{id:"remove"},"Remove"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"HashMap remove can uses key as a parameter:\nmap.remove(c); // c is key")),Object(u.b)("h2",{id:"treemap-vs-hashmap"},"TreeMap vs HashMap"),Object(u.b)("ul",null,Object(u.b)("li",{parentName:"ul"},"TreeMap are naturally sorted by order of key, HashMap is not:")),Object(u.b)("pre",null,Object(u.b)("code",Object(n.a)({parentName:"pre"},{}),"TreeMap<Integer, Integer> tm = new TreeMap<>();\ntm.put(3, 1);\ntm.put(2, 2);\ntm.put(1, 10);\ntm.put(-100, 2);\ntm.values(); //[2, 10, 2, 1]\n\nHashMap<Integer, Integer> hm = new HashMap<>();\nhm.put(3, 1);\nhm.put(2, 2);\nhm.put(1, 10);\nhm.put(-100, 2);\nhm.values(); // [10, 2, 1, 2]\n")))}o.isMDXComponent=!0}}]);